-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_mmult_Pipeline_LOOP1_LOOP2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_A_AWVALID : OUT STD_LOGIC;
    m_axi_A_AWREADY : IN STD_LOGIC;
    m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_WVALID : OUT STD_LOGIC;
    m_axi_A_WREADY : IN STD_LOGIC;
    m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_WLAST : OUT STD_LOGIC;
    m_axi_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_ARVALID : OUT STD_LOGIC;
    m_axi_A_ARREADY : IN STD_LOGIC;
    m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RVALID : IN STD_LOGIC;
    m_axi_A_RREADY : OUT STD_LOGIC;
    m_axi_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_RLAST : IN STD_LOGIC;
    m_axi_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BVALID : IN STD_LOGIC;
    m_axi_A_BREADY : OUT STD_LOGIC;
    m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_AWVALID : OUT STD_LOGIC;
    m_axi_B_AWREADY : IN STD_LOGIC;
    m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_WVALID : OUT STD_LOGIC;
    m_axi_B_WREADY : IN STD_LOGIC;
    m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_WLAST : OUT STD_LOGIC;
    m_axi_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_ARVALID : OUT STD_LOGIC;
    m_axi_B_ARREADY : IN STD_LOGIC;
    m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_RVALID : IN STD_LOGIC;
    m_axi_B_RREADY : OUT STD_LOGIC;
    m_axi_B_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_RLAST : IN STD_LOGIC;
    m_axi_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BVALID : IN STD_LOGIC;
    m_axi_B_BREADY : OUT STD_LOGIC;
    m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln29_1 : IN STD_LOGIC_VECTOR (61 downto 0);
    sext_ln29 : IN STD_LOGIC_VECTOR (61 downto 0);
    Bbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_ce0 : OUT STD_LOGIC;
    Bbuf_we0 : OUT STD_LOGIC;
    Bbuf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_1_ce0 : OUT STD_LOGIC;
    Bbuf_1_we0 : OUT STD_LOGIC;
    Bbuf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_2_ce0 : OUT STD_LOGIC;
    Bbuf_2_we0 : OUT STD_LOGIC;
    Bbuf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_3_ce0 : OUT STD_LOGIC;
    Bbuf_3_we0 : OUT STD_LOGIC;
    Bbuf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_4_ce0 : OUT STD_LOGIC;
    Bbuf_4_we0 : OUT STD_LOGIC;
    Bbuf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_5_ce0 : OUT STD_LOGIC;
    Bbuf_5_we0 : OUT STD_LOGIC;
    Bbuf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_6_ce0 : OUT STD_LOGIC;
    Bbuf_6_we0 : OUT STD_LOGIC;
    Bbuf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_7_ce0 : OUT STD_LOGIC;
    Bbuf_7_we0 : OUT STD_LOGIC;
    Bbuf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_8_ce0 : OUT STD_LOGIC;
    Bbuf_8_we0 : OUT STD_LOGIC;
    Bbuf_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_9_ce0 : OUT STD_LOGIC;
    Bbuf_9_we0 : OUT STD_LOGIC;
    Bbuf_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_10_ce0 : OUT STD_LOGIC;
    Bbuf_10_we0 : OUT STD_LOGIC;
    Bbuf_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_11_ce0 : OUT STD_LOGIC;
    Bbuf_11_we0 : OUT STD_LOGIC;
    Bbuf_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_12_ce0 : OUT STD_LOGIC;
    Bbuf_12_we0 : OUT STD_LOGIC;
    Bbuf_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_13_ce0 : OUT STD_LOGIC;
    Bbuf_13_we0 : OUT STD_LOGIC;
    Bbuf_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_14_ce0 : OUT STD_LOGIC;
    Bbuf_14_we0 : OUT STD_LOGIC;
    Bbuf_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Bbuf_15_ce0 : OUT STD_LOGIC;
    Bbuf_15_we0 : OUT STD_LOGIC;
    Bbuf_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_ce0 : OUT STD_LOGIC;
    Abuf_we0 : OUT STD_LOGIC;
    Abuf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_1_ce0 : OUT STD_LOGIC;
    Abuf_1_we0 : OUT STD_LOGIC;
    Abuf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_2_ce0 : OUT STD_LOGIC;
    Abuf_2_we0 : OUT STD_LOGIC;
    Abuf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_3_ce0 : OUT STD_LOGIC;
    Abuf_3_we0 : OUT STD_LOGIC;
    Abuf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_4_ce0 : OUT STD_LOGIC;
    Abuf_4_we0 : OUT STD_LOGIC;
    Abuf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_5_ce0 : OUT STD_LOGIC;
    Abuf_5_we0 : OUT STD_LOGIC;
    Abuf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_6_ce0 : OUT STD_LOGIC;
    Abuf_6_we0 : OUT STD_LOGIC;
    Abuf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_7_ce0 : OUT STD_LOGIC;
    Abuf_7_we0 : OUT STD_LOGIC;
    Abuf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_8_ce0 : OUT STD_LOGIC;
    Abuf_8_we0 : OUT STD_LOGIC;
    Abuf_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_9_ce0 : OUT STD_LOGIC;
    Abuf_9_we0 : OUT STD_LOGIC;
    Abuf_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_10_ce0 : OUT STD_LOGIC;
    Abuf_10_we0 : OUT STD_LOGIC;
    Abuf_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_11_ce0 : OUT STD_LOGIC;
    Abuf_11_we0 : OUT STD_LOGIC;
    Abuf_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_12_ce0 : OUT STD_LOGIC;
    Abuf_12_we0 : OUT STD_LOGIC;
    Abuf_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_13_ce0 : OUT STD_LOGIC;
    Abuf_13_we0 : OUT STD_LOGIC;
    Abuf_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_14_ce0 : OUT STD_LOGIC;
    Abuf_14_we0 : OUT STD_LOGIC;
    Abuf_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Abuf_15_ce0 : OUT STD_LOGIC;
    Abuf_15_we0 : OUT STD_LOGIC;
    Abuf_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mmult_mmult_Pipeline_LOOP1_LOOP2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln29_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal B_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal A_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln30_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_657_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln29_reg_846 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln29_reg_846_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln30_fu_665_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_reg_851_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_reg_856 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln2_reg_856_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_1_fu_716_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln29_1_reg_860 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln33_fu_723_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln33_reg_865 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1_reg_870 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln32_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln33_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln33_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_160 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln30_fu_679_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_164 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten_fu_168 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln29_1_fu_642_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln29_fu_710_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln33_fu_750_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln33_fu_755_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_780_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mmult_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mmult_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_164 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_164 <= select_ln29_1_fu_716_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln29_fu_636_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_168 <= add_ln29_1_fu_642_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_168 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln29_fu_636_p2 = ap_const_lv1_0))) then 
                    j_fu_160 <= add_ln30_fu_679_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_160 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                bitcast_ln32_reg_874 <= bitcast_ln32_fu_737_p1;
                bitcast_ln33_reg_894 <= bitcast_ln33_fu_741_p1;
                icmp_ln30_reg_841 <= icmp_ln30_fu_651_p2;
                select_ln29_1_reg_860 <= select_ln29_1_fu_716_p3;
                select_ln29_reg_846 <= select_ln29_fu_657_p3;
                select_ln29_reg_846_pp0_iter1_reg <= select_ln29_reg_846;
                trunc_ln1_reg_870 <= select_ln29_1_fu_716_p3(4 downto 1);
                trunc_ln2_reg_856 <= select_ln29_fu_657_p3(4 downto 1);
                trunc_ln2_reg_856_pp0_iter1_reg <= trunc_ln2_reg_856;
                trunc_ln30_reg_851 <= trunc_ln30_fu_665_p1;
                trunc_ln30_reg_851_pp0_iter1_reg <= trunc_ln30_reg_851;
                trunc_ln33_reg_865 <= trunc_ln33_fu_723_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    A_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_A_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_blk_n_R <= m_axi_A_RVALID;
        else 
            A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    Abuf_10_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_10_ce0 <= ap_const_logic_1;
        else 
            Abuf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_10_d0 <= bitcast_ln32_reg_874;

    Abuf_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_10_we0 <= ap_const_logic_1;
        else 
            Abuf_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_11_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_11_ce0 <= ap_const_logic_1;
        else 
            Abuf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_11_d0 <= bitcast_ln32_reg_874;

    Abuf_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_11_we0 <= ap_const_logic_1;
        else 
            Abuf_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_12_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_12_ce0 <= ap_const_logic_1;
        else 
            Abuf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_12_d0 <= bitcast_ln32_reg_874;

    Abuf_12_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_12_we0 <= ap_const_logic_1;
        else 
            Abuf_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_13_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_13_ce0 <= ap_const_logic_1;
        else 
            Abuf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_13_d0 <= bitcast_ln32_reg_874;

    Abuf_13_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_13_we0 <= ap_const_logic_1;
        else 
            Abuf_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_14_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_14_ce0 <= ap_const_logic_1;
        else 
            Abuf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_14_d0 <= bitcast_ln32_reg_874;

    Abuf_14_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_14_we0 <= ap_const_logic_1;
        else 
            Abuf_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_15_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_15_ce0 <= ap_const_logic_1;
        else 
            Abuf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_15_d0 <= bitcast_ln32_reg_874;

    Abuf_15_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_15_we0 <= ap_const_logic_1;
        else 
            Abuf_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_1_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_1_ce0 <= ap_const_logic_1;
        else 
            Abuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_1_d0 <= bitcast_ln32_reg_874;

    Abuf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_1_we0 <= ap_const_logic_1;
        else 
            Abuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_2_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_2_ce0 <= ap_const_logic_1;
        else 
            Abuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_2_d0 <= bitcast_ln32_reg_874;

    Abuf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_2_we0 <= ap_const_logic_1;
        else 
            Abuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_3_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_3_ce0 <= ap_const_logic_1;
        else 
            Abuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_3_d0 <= bitcast_ln32_reg_874;

    Abuf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_3_we0 <= ap_const_logic_1;
        else 
            Abuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_4_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_4_ce0 <= ap_const_logic_1;
        else 
            Abuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_4_d0 <= bitcast_ln32_reg_874;

    Abuf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_4_we0 <= ap_const_logic_1;
        else 
            Abuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_5_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_5_ce0 <= ap_const_logic_1;
        else 
            Abuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_5_d0 <= bitcast_ln32_reg_874;

    Abuf_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_5_we0 <= ap_const_logic_1;
        else 
            Abuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_6_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_6_ce0 <= ap_const_logic_1;
        else 
            Abuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_6_d0 <= bitcast_ln32_reg_874;

    Abuf_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_6_we0 <= ap_const_logic_1;
        else 
            Abuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_7_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_7_ce0 <= ap_const_logic_1;
        else 
            Abuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_7_d0 <= bitcast_ln32_reg_874;

    Abuf_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_7_we0 <= ap_const_logic_1;
        else 
            Abuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_8_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_8_ce0 <= ap_const_logic_1;
        else 
            Abuf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_8_d0 <= bitcast_ln32_reg_874;

    Abuf_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_8) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_8_we0 <= ap_const_logic_1;
        else 
            Abuf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_9_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_9_ce0 <= ap_const_logic_1;
        else 
            Abuf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_9_d0 <= bitcast_ln32_reg_874;

    Abuf_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_9_we0 <= ap_const_logic_1;
        else 
            Abuf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_address0 <= zext_ln32_fu_786_p1(6 - 1 downto 0);

    Abuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_ce0 <= ap_const_logic_1;
        else 
            Abuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_d0 <= bitcast_ln32_reg_874;

    Abuf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln2_reg_856_pp0_iter1_reg)
    begin
        if (((trunc_ln2_reg_856_pp0_iter1_reg = ap_const_lv4_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Abuf_we0 <= ap_const_logic_1;
        else 
            Abuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_B_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_blk_n_R <= m_axi_B_RVALID;
        else 
            B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    Bbuf_10_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_10_ce0 <= ap_const_logic_1;
        else 
            Bbuf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_10_d0 <= bitcast_ln33_reg_894;

    Bbuf_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_10_we0 <= ap_const_logic_1;
        else 
            Bbuf_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_11_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_11_ce0 <= ap_const_logic_1;
        else 
            Bbuf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_11_d0 <= bitcast_ln33_reg_894;

    Bbuf_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_11_we0 <= ap_const_logic_1;
        else 
            Bbuf_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_12_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_12_ce0 <= ap_const_logic_1;
        else 
            Bbuf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_12_d0 <= bitcast_ln33_reg_894;

    Bbuf_12_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_12_we0 <= ap_const_logic_1;
        else 
            Bbuf_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_13_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_13_ce0 <= ap_const_logic_1;
        else 
            Bbuf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_13_d0 <= bitcast_ln33_reg_894;

    Bbuf_13_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_13_we0 <= ap_const_logic_1;
        else 
            Bbuf_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_14_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_14_ce0 <= ap_const_logic_1;
        else 
            Bbuf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_14_d0 <= bitcast_ln33_reg_894;

    Bbuf_14_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_14_we0 <= ap_const_logic_1;
        else 
            Bbuf_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_15_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_15_ce0 <= ap_const_logic_1;
        else 
            Bbuf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_15_d0 <= bitcast_ln33_reg_894;

    Bbuf_15_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_15_we0 <= ap_const_logic_1;
        else 
            Bbuf_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_1_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_1_ce0 <= ap_const_logic_1;
        else 
            Bbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_1_d0 <= bitcast_ln33_reg_894;

    Bbuf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_1_we0 <= ap_const_logic_1;
        else 
            Bbuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_2_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_2_ce0 <= ap_const_logic_1;
        else 
            Bbuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_2_d0 <= bitcast_ln33_reg_894;

    Bbuf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_2_we0 <= ap_const_logic_1;
        else 
            Bbuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_3_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_3_ce0 <= ap_const_logic_1;
        else 
            Bbuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_3_d0 <= bitcast_ln33_reg_894;

    Bbuf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_3_we0 <= ap_const_logic_1;
        else 
            Bbuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_4_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_4_ce0 <= ap_const_logic_1;
        else 
            Bbuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_4_d0 <= bitcast_ln33_reg_894;

    Bbuf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_4_we0 <= ap_const_logic_1;
        else 
            Bbuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_5_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_5_ce0 <= ap_const_logic_1;
        else 
            Bbuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_5_d0 <= bitcast_ln33_reg_894;

    Bbuf_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_5_we0 <= ap_const_logic_1;
        else 
            Bbuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_6_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_6_ce0 <= ap_const_logic_1;
        else 
            Bbuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_6_d0 <= bitcast_ln33_reg_894;

    Bbuf_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_6_we0 <= ap_const_logic_1;
        else 
            Bbuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_7_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_7_ce0 <= ap_const_logic_1;
        else 
            Bbuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_7_d0 <= bitcast_ln33_reg_894;

    Bbuf_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_7_we0 <= ap_const_logic_1;
        else 
            Bbuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_8_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_8_ce0 <= ap_const_logic_1;
        else 
            Bbuf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_8_d0 <= bitcast_ln33_reg_894;

    Bbuf_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_8) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_8_we0 <= ap_const_logic_1;
        else 
            Bbuf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_9_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_9_ce0 <= ap_const_logic_1;
        else 
            Bbuf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_9_d0 <= bitcast_ln33_reg_894;

    Bbuf_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_9_we0 <= ap_const_logic_1;
        else 
            Bbuf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_address0 <= zext_ln33_fu_760_p1(6 - 1 downto 0);

    Bbuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_ce0 <= ap_const_logic_1;
        else 
            Bbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_d0 <= bitcast_ln33_reg_894;

    Bbuf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln1_reg_870)
    begin
        if (((trunc_ln1_reg_870 = ap_const_lv4_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_we0 <= ap_const_logic_1;
        else 
            Bbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln29_1_fu_642_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln29_fu_710_p2 <= std_logic_vector(unsigned(i_fu_164) + unsigned(ap_const_lv6_1));
    add_ln30_fu_679_p2 <= std_logic_vector(unsigned(select_ln29_fu_657_p3) + unsigned(ap_const_lv6_1));
    add_ln33_fu_755_p2 <= std_logic_vector(unsigned(shl_ln33_fu_750_p2) + unsigned(select_ln29_reg_846_pp0_iter1_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_A_RVALID, m_axi_B_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((m_axi_A_RVALID = ap_const_logic_0) or (m_axi_B_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln29_fu_636_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln29_fu_636_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_168)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_168;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_160, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_160;
        end if; 
    end process;

    bitcast_ln32_fu_737_p1 <= m_axi_A_RDATA;
    bitcast_ln33_fu_741_p1 <= m_axi_B_RDATA;
    icmp_ln29_fu_636_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_400) else "0";
    icmp_ln30_fu_651_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv6_20) else "0";
    m_axi_A_ARADDR <= ap_const_lv64_0;
    m_axi_A_ARBURST <= ap_const_lv2_0;
    m_axi_A_ARCACHE <= ap_const_lv4_0;
    m_axi_A_ARID <= ap_const_lv1_0;
    m_axi_A_ARLEN <= ap_const_lv32_0;
    m_axi_A_ARLOCK <= ap_const_lv2_0;
    m_axi_A_ARPROT <= ap_const_lv3_0;
    m_axi_A_ARQOS <= ap_const_lv4_0;
    m_axi_A_ARREGION <= ap_const_lv4_0;
    m_axi_A_ARSIZE <= ap_const_lv3_0;
    m_axi_A_ARUSER <= ap_const_lv1_0;
    m_axi_A_ARVALID <= ap_const_logic_0;
    m_axi_A_AWADDR <= ap_const_lv64_0;
    m_axi_A_AWBURST <= ap_const_lv2_0;
    m_axi_A_AWCACHE <= ap_const_lv4_0;
    m_axi_A_AWID <= ap_const_lv1_0;
    m_axi_A_AWLEN <= ap_const_lv32_0;
    m_axi_A_AWLOCK <= ap_const_lv2_0;
    m_axi_A_AWPROT <= ap_const_lv3_0;
    m_axi_A_AWQOS <= ap_const_lv4_0;
    m_axi_A_AWREGION <= ap_const_lv4_0;
    m_axi_A_AWSIZE <= ap_const_lv3_0;
    m_axi_A_AWUSER <= ap_const_lv1_0;
    m_axi_A_AWVALID <= ap_const_logic_0;
    m_axi_A_BREADY <= ap_const_logic_0;

    m_axi_A_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_A_RREADY <= ap_const_logic_1;
        else 
            m_axi_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_WDATA <= ap_const_lv32_0;
    m_axi_A_WID <= ap_const_lv1_0;
    m_axi_A_WLAST <= ap_const_logic_0;
    m_axi_A_WSTRB <= ap_const_lv4_0;
    m_axi_A_WUSER <= ap_const_lv1_0;
    m_axi_A_WVALID <= ap_const_logic_0;
    m_axi_B_ARADDR <= ap_const_lv64_0;
    m_axi_B_ARBURST <= ap_const_lv2_0;
    m_axi_B_ARCACHE <= ap_const_lv4_0;
    m_axi_B_ARID <= ap_const_lv1_0;
    m_axi_B_ARLEN <= ap_const_lv32_0;
    m_axi_B_ARLOCK <= ap_const_lv2_0;
    m_axi_B_ARPROT <= ap_const_lv3_0;
    m_axi_B_ARQOS <= ap_const_lv4_0;
    m_axi_B_ARREGION <= ap_const_lv4_0;
    m_axi_B_ARSIZE <= ap_const_lv3_0;
    m_axi_B_ARUSER <= ap_const_lv1_0;
    m_axi_B_ARVALID <= ap_const_logic_0;
    m_axi_B_AWADDR <= ap_const_lv64_0;
    m_axi_B_AWBURST <= ap_const_lv2_0;
    m_axi_B_AWCACHE <= ap_const_lv4_0;
    m_axi_B_AWID <= ap_const_lv1_0;
    m_axi_B_AWLEN <= ap_const_lv32_0;
    m_axi_B_AWLOCK <= ap_const_lv2_0;
    m_axi_B_AWPROT <= ap_const_lv3_0;
    m_axi_B_AWQOS <= ap_const_lv4_0;
    m_axi_B_AWREGION <= ap_const_lv4_0;
    m_axi_B_AWSIZE <= ap_const_lv3_0;
    m_axi_B_AWUSER <= ap_const_lv1_0;
    m_axi_B_AWVALID <= ap_const_logic_0;
    m_axi_B_BREADY <= ap_const_logic_0;

    m_axi_B_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_B_RREADY <= ap_const_logic_1;
        else 
            m_axi_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B_WDATA <= ap_const_lv32_0;
    m_axi_B_WID <= ap_const_lv1_0;
    m_axi_B_WLAST <= ap_const_logic_0;
    m_axi_B_WSTRB <= ap_const_lv4_0;
    m_axi_B_WUSER <= ap_const_lv1_0;
    m_axi_B_WVALID <= ap_const_logic_0;
    select_ln29_1_fu_716_p3 <= 
        add_ln29_fu_710_p2 when (icmp_ln30_reg_841(0) = '1') else 
        i_fu_164;
    select_ln29_fu_657_p3 <= 
        ap_const_lv6_0 when (icmp_ln30_fu_651_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shl_ln33_fu_750_p2 <= std_logic_vector(shift_left(unsigned(select_ln29_1_reg_860),to_integer(unsigned('0' & ap_const_lv6_5(6-1 downto 0)))));
    tmp_2_fu_780_p3 <= (trunc_ln33_reg_865 & trunc_ln30_reg_851_pp0_iter1_reg);
    trunc_ln30_fu_665_p1 <= select_ln29_fu_657_p3(1 - 1 downto 0);
    trunc_ln33_fu_723_p1 <= select_ln29_1_fu_716_p3(5 - 1 downto 0);
    zext_ln32_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_780_p3),64));
    zext_ln33_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_755_p2),64));
end behav;

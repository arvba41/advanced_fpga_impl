// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mmult_mmult_Pipeline_LOOPA1_LOOPA2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_A_AWVALID,
        m_axi_A_AWREADY,
        m_axi_A_AWADDR,
        m_axi_A_AWID,
        m_axi_A_AWLEN,
        m_axi_A_AWSIZE,
        m_axi_A_AWBURST,
        m_axi_A_AWLOCK,
        m_axi_A_AWCACHE,
        m_axi_A_AWPROT,
        m_axi_A_AWQOS,
        m_axi_A_AWREGION,
        m_axi_A_AWUSER,
        m_axi_A_WVALID,
        m_axi_A_WREADY,
        m_axi_A_WDATA,
        m_axi_A_WSTRB,
        m_axi_A_WLAST,
        m_axi_A_WID,
        m_axi_A_WUSER,
        m_axi_A_ARVALID,
        m_axi_A_ARREADY,
        m_axi_A_ARADDR,
        m_axi_A_ARID,
        m_axi_A_ARLEN,
        m_axi_A_ARSIZE,
        m_axi_A_ARBURST,
        m_axi_A_ARLOCK,
        m_axi_A_ARCACHE,
        m_axi_A_ARPROT,
        m_axi_A_ARQOS,
        m_axi_A_ARREGION,
        m_axi_A_ARUSER,
        m_axi_A_RVALID,
        m_axi_A_RREADY,
        m_axi_A_RDATA,
        m_axi_A_RLAST,
        m_axi_A_RID,
        m_axi_A_RFIFONUM,
        m_axi_A_RUSER,
        m_axi_A_RRESP,
        m_axi_A_BVALID,
        m_axi_A_BREADY,
        m_axi_A_BRESP,
        m_axi_A_BID,
        m_axi_A_BUSER,
        sext_ln43,
        Abuf_address0,
        Abuf_ce0,
        Abuf_we0,
        Abuf_d0,
        Abuf_1_address0,
        Abuf_1_ce0,
        Abuf_1_we0,
        Abuf_1_d0,
        Abuf_2_address0,
        Abuf_2_ce0,
        Abuf_2_we0,
        Abuf_2_d0,
        Abuf_3_address0,
        Abuf_3_ce0,
        Abuf_3_we0,
        Abuf_3_d0,
        Abuf_4_address0,
        Abuf_4_ce0,
        Abuf_4_we0,
        Abuf_4_d0,
        Abuf_5_address0,
        Abuf_5_ce0,
        Abuf_5_we0,
        Abuf_5_d0,
        Abuf_6_address0,
        Abuf_6_ce0,
        Abuf_6_we0,
        Abuf_6_d0,
        Abuf_7_address0,
        Abuf_7_ce0,
        Abuf_7_we0,
        Abuf_7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_A_AWVALID;
input   m_axi_A_AWREADY;
output  [63:0] m_axi_A_AWADDR;
output  [0:0] m_axi_A_AWID;
output  [31:0] m_axi_A_AWLEN;
output  [2:0] m_axi_A_AWSIZE;
output  [1:0] m_axi_A_AWBURST;
output  [1:0] m_axi_A_AWLOCK;
output  [3:0] m_axi_A_AWCACHE;
output  [2:0] m_axi_A_AWPROT;
output  [3:0] m_axi_A_AWQOS;
output  [3:0] m_axi_A_AWREGION;
output  [0:0] m_axi_A_AWUSER;
output   m_axi_A_WVALID;
input   m_axi_A_WREADY;
output  [31:0] m_axi_A_WDATA;
output  [3:0] m_axi_A_WSTRB;
output   m_axi_A_WLAST;
output  [0:0] m_axi_A_WID;
output  [0:0] m_axi_A_WUSER;
output   m_axi_A_ARVALID;
input   m_axi_A_ARREADY;
output  [63:0] m_axi_A_ARADDR;
output  [0:0] m_axi_A_ARID;
output  [31:0] m_axi_A_ARLEN;
output  [2:0] m_axi_A_ARSIZE;
output  [1:0] m_axi_A_ARBURST;
output  [1:0] m_axi_A_ARLOCK;
output  [3:0] m_axi_A_ARCACHE;
output  [2:0] m_axi_A_ARPROT;
output  [3:0] m_axi_A_ARQOS;
output  [3:0] m_axi_A_ARREGION;
output  [0:0] m_axi_A_ARUSER;
input   m_axi_A_RVALID;
output   m_axi_A_RREADY;
input  [31:0] m_axi_A_RDATA;
input   m_axi_A_RLAST;
input  [0:0] m_axi_A_RID;
input  [8:0] m_axi_A_RFIFONUM;
input  [0:0] m_axi_A_RUSER;
input  [1:0] m_axi_A_RRESP;
input   m_axi_A_BVALID;
output   m_axi_A_BREADY;
input  [1:0] m_axi_A_BRESP;
input  [0:0] m_axi_A_BID;
input  [0:0] m_axi_A_BUSER;
input  [61:0] sext_ln43;
output  [6:0] Abuf_address0;
output   Abuf_ce0;
output   Abuf_we0;
output  [31:0] Abuf_d0;
output  [6:0] Abuf_1_address0;
output   Abuf_1_ce0;
output   Abuf_1_we0;
output  [31:0] Abuf_1_d0;
output  [6:0] Abuf_2_address0;
output   Abuf_2_ce0;
output   Abuf_2_we0;
output  [31:0] Abuf_2_d0;
output  [6:0] Abuf_3_address0;
output   Abuf_3_ce0;
output   Abuf_3_we0;
output  [31:0] Abuf_3_d0;
output  [6:0] Abuf_4_address0;
output   Abuf_4_ce0;
output   Abuf_4_we0;
output  [31:0] Abuf_4_d0;
output  [6:0] Abuf_5_address0;
output   Abuf_5_ce0;
output   Abuf_5_we0;
output  [31:0] Abuf_5_d0;
output  [6:0] Abuf_6_address0;
output   Abuf_6_ce0;
output   Abuf_6_we0;
output  [31:0] Abuf_6_d0;
output  [6:0] Abuf_7_address0;
output   Abuf_7_ce0;
output   Abuf_7_we0;
output  [31:0] Abuf_7_d0;

reg ap_idle;
reg m_axi_A_RREADY;
reg Abuf_ce0;
reg Abuf_we0;
reg Abuf_1_ce0;
reg Abuf_1_we0;
reg Abuf_2_ce0;
reg Abuf_2_we0;
reg Abuf_3_ce0;
reg Abuf_3_we0;
reg Abuf_4_ce0;
reg Abuf_4_we0;
reg Abuf_5_ce0;
reg Abuf_5_we0;
reg Abuf_6_ce0;
reg Abuf_6_we0;
reg Abuf_7_ce0;
reg Abuf_7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln46_fu_243_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln47_fu_269_p2;
reg   [0:0] icmp_ln47_reg_393;
wire   [2:0] trunc_ln47_1_fu_283_p1;
reg   [2:0] trunc_ln47_1_reg_398;
reg   [2:0] trunc_ln_reg_403;
reg   [31:0] A_addr_read_reg_407;
wire   [63:0] zext_ln49_fu_335_p1;
reg   [6:0] j_fu_94;
wire   [6:0] add_ln47_fu_297_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_98;
wire   [4:0] select_ln46_1_fu_317_p3;
reg   [10:0] indvar_flatten_fu_102;
wire   [10:0] add_ln46_1_fu_249_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] bitcast_ln49_fu_347_p1;
wire   [6:0] select_ln46_fu_275_p3;
wire   [4:0] add_ln46_fu_311_p2;
wire   [3:0] trunc_ln47_fu_324_p1;
wire   [6:0] tmp_3_fu_328_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_94 = 7'd0;
#0 i_fu_98 = 5'd0;
#0 indvar_flatten_fu_102 = 11'd0;
#0 ap_done_reg = 1'b0;
end

mmult_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_98 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_98 <= select_ln46_1_fu_317_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln46_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_102 <= add_ln46_1_fu_249_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_94 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_94 <= add_ln47_fu_297_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_addr_read_reg_407 <= m_axi_A_RDATA;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln47_reg_393 <= icmp_ln47_fu_269_p2;
        trunc_ln47_1_reg_398 <= trunc_ln47_1_fu_283_p1;
        trunc_ln_reg_403 <= {{select_ln46_fu_275_p3[5:3]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_blk_n_R = m_axi_A_RVALID;
    end else begin
        A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_1_ce0 = 1'b1;
    end else begin
        Abuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_1_we0 = 1'b1;
    end else begin
        Abuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_2_ce0 = 1'b1;
    end else begin
        Abuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_2_we0 = 1'b1;
    end else begin
        Abuf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_3_ce0 = 1'b1;
    end else begin
        Abuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_3_we0 = 1'b1;
    end else begin
        Abuf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_4_ce0 = 1'b1;
    end else begin
        Abuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_4_we0 = 1'b1;
    end else begin
        Abuf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_5_ce0 = 1'b1;
    end else begin
        Abuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_5_we0 = 1'b1;
    end else begin
        Abuf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_6_ce0 = 1'b1;
    end else begin
        Abuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd6) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_6_we0 = 1'b1;
    end else begin
        Abuf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_7_ce0 = 1'b1;
    end else begin
        Abuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_7_we0 = 1'b1;
    end else begin
        Abuf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_ce0 = 1'b1;
    end else begin
        Abuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_reg_403 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Abuf_we0 = 1'b1;
    end else begin
        Abuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_243_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_A_RREADY = 1'b1;
    end else begin
        m_axi_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Abuf_1_address0 = zext_ln49_fu_335_p1;

assign Abuf_1_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_2_address0 = zext_ln49_fu_335_p1;

assign Abuf_2_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_3_address0 = zext_ln49_fu_335_p1;

assign Abuf_3_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_4_address0 = zext_ln49_fu_335_p1;

assign Abuf_4_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_5_address0 = zext_ln49_fu_335_p1;

assign Abuf_5_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_6_address0 = zext_ln49_fu_335_p1;

assign Abuf_6_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_7_address0 = zext_ln49_fu_335_p1;

assign Abuf_7_d0 = bitcast_ln49_fu_347_p1;

assign Abuf_address0 = zext_ln49_fu_335_p1;

assign Abuf_d0 = bitcast_ln49_fu_347_p1;

assign add_ln46_1_fu_249_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln46_fu_311_p2 = (i_fu_98 + 5'd1);

assign add_ln47_fu_297_p2 = (select_ln46_fu_275_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_A_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln49_fu_347_p1 = A_addr_read_reg_407;

assign icmp_ln46_fu_243_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_269_p2 = ((j_fu_94 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_A_ARADDR = 64'd0;

assign m_axi_A_ARBURST = 2'd0;

assign m_axi_A_ARCACHE = 4'd0;

assign m_axi_A_ARID = 1'd0;

assign m_axi_A_ARLEN = 32'd0;

assign m_axi_A_ARLOCK = 2'd0;

assign m_axi_A_ARPROT = 3'd0;

assign m_axi_A_ARQOS = 4'd0;

assign m_axi_A_ARREGION = 4'd0;

assign m_axi_A_ARSIZE = 3'd0;

assign m_axi_A_ARUSER = 1'd0;

assign m_axi_A_ARVALID = 1'b0;

assign m_axi_A_AWADDR = 64'd0;

assign m_axi_A_AWBURST = 2'd0;

assign m_axi_A_AWCACHE = 4'd0;

assign m_axi_A_AWID = 1'd0;

assign m_axi_A_AWLEN = 32'd0;

assign m_axi_A_AWLOCK = 2'd0;

assign m_axi_A_AWPROT = 3'd0;

assign m_axi_A_AWQOS = 4'd0;

assign m_axi_A_AWREGION = 4'd0;

assign m_axi_A_AWSIZE = 3'd0;

assign m_axi_A_AWUSER = 1'd0;

assign m_axi_A_AWVALID = 1'b0;

assign m_axi_A_BREADY = 1'b0;

assign m_axi_A_WDATA = 32'd0;

assign m_axi_A_WID = 1'd0;

assign m_axi_A_WLAST = 1'b0;

assign m_axi_A_WSTRB = 4'd0;

assign m_axi_A_WUSER = 1'd0;

assign m_axi_A_WVALID = 1'b0;

assign select_ln46_1_fu_317_p3 = ((icmp_ln47_reg_393[0:0] == 1'b1) ? add_ln46_fu_311_p2 : i_fu_98);

assign select_ln46_fu_275_p3 = ((icmp_ln47_fu_269_p2[0:0] == 1'b1) ? 7'd0 : j_fu_94);

assign tmp_3_fu_328_p3 = {{trunc_ln47_fu_324_p1}, {trunc_ln47_1_reg_398}};

assign trunc_ln47_1_fu_283_p1 = select_ln46_fu_275_p3[2:0];

assign trunc_ln47_fu_324_p1 = select_ln46_1_fu_317_p3[3:0];

assign zext_ln49_fu_335_p1 = tmp_3_fu_328_p3;

endmodule //mmult_mmult_Pipeline_LOOPA1_LOOPA2

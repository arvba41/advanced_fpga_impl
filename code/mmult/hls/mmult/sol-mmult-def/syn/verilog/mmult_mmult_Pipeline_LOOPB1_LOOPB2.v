// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mmult_mmult_Pipeline_LOOPB1_LOOPB2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_B_AWVALID,
        m_axi_B_AWREADY,
        m_axi_B_AWADDR,
        m_axi_B_AWID,
        m_axi_B_AWLEN,
        m_axi_B_AWSIZE,
        m_axi_B_AWBURST,
        m_axi_B_AWLOCK,
        m_axi_B_AWCACHE,
        m_axi_B_AWPROT,
        m_axi_B_AWQOS,
        m_axi_B_AWREGION,
        m_axi_B_AWUSER,
        m_axi_B_WVALID,
        m_axi_B_WREADY,
        m_axi_B_WDATA,
        m_axi_B_WSTRB,
        m_axi_B_WLAST,
        m_axi_B_WID,
        m_axi_B_WUSER,
        m_axi_B_ARVALID,
        m_axi_B_ARREADY,
        m_axi_B_ARADDR,
        m_axi_B_ARID,
        m_axi_B_ARLEN,
        m_axi_B_ARSIZE,
        m_axi_B_ARBURST,
        m_axi_B_ARLOCK,
        m_axi_B_ARCACHE,
        m_axi_B_ARPROT,
        m_axi_B_ARQOS,
        m_axi_B_ARREGION,
        m_axi_B_ARUSER,
        m_axi_B_RVALID,
        m_axi_B_RREADY,
        m_axi_B_RDATA,
        m_axi_B_RLAST,
        m_axi_B_RID,
        m_axi_B_RFIFONUM,
        m_axi_B_RUSER,
        m_axi_B_RRESP,
        m_axi_B_BVALID,
        m_axi_B_BREADY,
        m_axi_B_BRESP,
        m_axi_B_BID,
        m_axi_B_BUSER,
        Bbuf_address0,
        Bbuf_ce0,
        Bbuf_we0,
        Bbuf_d0,
        Bbuf_1_address0,
        Bbuf_1_ce0,
        Bbuf_1_we0,
        Bbuf_1_d0,
        Bbuf_2_address0,
        Bbuf_2_ce0,
        Bbuf_2_we0,
        Bbuf_2_d0,
        Bbuf_3_address0,
        Bbuf_3_ce0,
        Bbuf_3_we0,
        Bbuf_3_d0,
        Bbuf_4_address0,
        Bbuf_4_ce0,
        Bbuf_4_we0,
        Bbuf_4_d0,
        Bbuf_5_address0,
        Bbuf_5_ce0,
        Bbuf_5_we0,
        Bbuf_5_d0,
        Bbuf_6_address0,
        Bbuf_6_ce0,
        Bbuf_6_we0,
        Bbuf_6_d0,
        Bbuf_7_address0,
        Bbuf_7_ce0,
        Bbuf_7_we0,
        Bbuf_7_d0,
        empty,
        B_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_B_AWVALID;
input   m_axi_B_AWREADY;
output  [63:0] m_axi_B_AWADDR;
output  [0:0] m_axi_B_AWID;
output  [31:0] m_axi_B_AWLEN;
output  [2:0] m_axi_B_AWSIZE;
output  [1:0] m_axi_B_AWBURST;
output  [1:0] m_axi_B_AWLOCK;
output  [3:0] m_axi_B_AWCACHE;
output  [2:0] m_axi_B_AWPROT;
output  [3:0] m_axi_B_AWQOS;
output  [3:0] m_axi_B_AWREGION;
output  [0:0] m_axi_B_AWUSER;
output   m_axi_B_WVALID;
input   m_axi_B_WREADY;
output  [31:0] m_axi_B_WDATA;
output  [3:0] m_axi_B_WSTRB;
output   m_axi_B_WLAST;
output  [0:0] m_axi_B_WID;
output  [0:0] m_axi_B_WUSER;
output   m_axi_B_ARVALID;
input   m_axi_B_ARREADY;
output  [63:0] m_axi_B_ARADDR;
output  [0:0] m_axi_B_ARID;
output  [31:0] m_axi_B_ARLEN;
output  [2:0] m_axi_B_ARSIZE;
output  [1:0] m_axi_B_ARBURST;
output  [1:0] m_axi_B_ARLOCK;
output  [3:0] m_axi_B_ARCACHE;
output  [2:0] m_axi_B_ARPROT;
output  [3:0] m_axi_B_ARQOS;
output  [3:0] m_axi_B_ARREGION;
output  [0:0] m_axi_B_ARUSER;
input   m_axi_B_RVALID;
output   m_axi_B_RREADY;
input  [31:0] m_axi_B_RDATA;
input   m_axi_B_RLAST;
input  [0:0] m_axi_B_RID;
input  [8:0] m_axi_B_RFIFONUM;
input  [0:0] m_axi_B_RUSER;
input  [1:0] m_axi_B_RRESP;
input   m_axi_B_BVALID;
output   m_axi_B_BREADY;
input  [1:0] m_axi_B_BRESP;
input  [0:0] m_axi_B_BID;
input  [0:0] m_axi_B_BUSER;
output  [6:0] Bbuf_address0;
output   Bbuf_ce0;
output   Bbuf_we0;
output  [31:0] Bbuf_d0;
output  [6:0] Bbuf_1_address0;
output   Bbuf_1_ce0;
output   Bbuf_1_we0;
output  [31:0] Bbuf_1_d0;
output  [6:0] Bbuf_2_address0;
output   Bbuf_2_ce0;
output   Bbuf_2_we0;
output  [31:0] Bbuf_2_d0;
output  [6:0] Bbuf_3_address0;
output   Bbuf_3_ce0;
output   Bbuf_3_we0;
output  [31:0] Bbuf_3_d0;
output  [6:0] Bbuf_4_address0;
output   Bbuf_4_ce0;
output   Bbuf_4_we0;
output  [31:0] Bbuf_4_d0;
output  [6:0] Bbuf_5_address0;
output   Bbuf_5_ce0;
output   Bbuf_5_we0;
output  [31:0] Bbuf_5_d0;
output  [6:0] Bbuf_6_address0;
output   Bbuf_6_ce0;
output   Bbuf_6_we0;
output  [31:0] Bbuf_6_d0;
output  [6:0] Bbuf_7_address0;
output   Bbuf_7_ce0;
output   Bbuf_7_we0;
output  [31:0] Bbuf_7_d0;
input  [1:0] empty;
input  [63:0] B_offset;

reg ap_idle;
reg m_axi_B_ARVALID;
reg m_axi_B_RREADY;
reg Bbuf_ce0;
reg Bbuf_we0;
reg Bbuf_1_ce0;
reg Bbuf_1_we0;
reg Bbuf_2_ce0;
reg Bbuf_2_we0;
reg Bbuf_3_ce0;
reg Bbuf_3_we0;
reg Bbuf_4_ce0;
reg Bbuf_4_we0;
reg Bbuf_5_ce0;
reg Bbuf_5_we0;
reg Bbuf_6_ce0;
reg Bbuf_6_we0;
reg Bbuf_7_ce0;
reg Bbuf_7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
reg   [0:0] or_ln53_reg_464;
reg    ap_block_state2_io;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln53_fu_283_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    B_blk_n_R;
wire    ap_block_pp0_stage0;
reg    B_blk_n_AR;
reg   [0:0] icmp_ln53_reg_460;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln53_fu_313_p2;
wire   [4:0] select_ln53_fu_319_p3;
reg   [4:0] select_ln53_reg_468;
reg   [4:0] select_ln53_reg_468_pp0_iter1_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter2_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter3_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter4_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter5_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter6_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter7_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter8_reg;
reg   [4:0] select_ln53_reg_468_pp0_iter9_reg;
wire   [6:0] select_ln53_1_fu_327_p3;
reg   [6:0] select_ln53_1_reg_473;
reg   [6:0] select_ln53_1_reg_473_pp0_iter1_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter2_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter3_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter4_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter5_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter6_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter7_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter8_reg;
reg   [6:0] select_ln53_1_reg_473_pp0_iter9_reg;
reg   [63:0] B_addr_reg_479;
reg   [2:0] trunc_ln2_reg_485;
wire   [31:0] bitcast_ln56_fu_409_p1;
reg   [31:0] bitcast_ln56_reg_489;
reg   [0:0] ap_phi_mux_first_iter_1_phi_fu_257_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln56_1_fu_427_p1;
wire  signed [63:0] sext_ln54_fu_369_p1;
reg   [4:0] j_fu_114;
wire   [4:0] add_ln54_fu_379_p2;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_118;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten134_fu_122;
wire   [10:0] add_ln53_2_fu_289_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten134_load;
wire   [0:0] icmp_ln54_fu_307_p2;
wire   [6:0] add_ln53_1_fu_301_p2;
wire   [5:0] trunc_ln53_fu_335_p1;
wire   [13:0] shl_ln53_1_fu_339_p4;
wire   [63:0] zext_ln53_fu_349_p1;
wire   [63:0] add_ln53_fu_353_p2;
wire   [61:0] trunc_ln1_fu_359_p4;
wire   [6:0] shl_ln56_fu_413_p2;
wire   [6:0] zext_ln56_fu_418_p1;
wire   [6:0] add_ln56_fu_421_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_600;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 j_fu_114 = 5'd0;
#0 i_fu_118 = 7'd0;
#0 indvar_flatten134_fu_122 = 11'd0;
#0 ap_done_reg = 1'b0;
end

mmult_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln53_fu_283_p2 == 1'd0))) begin
            i_fu_118 <= select_ln53_1_fu_327_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_118 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln53_fu_283_p2 == 1'd0))) begin
            indvar_flatten134_fu_122 <= add_ln53_2_fu_289_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten134_fu_122 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln53_fu_283_p2 == 1'd0))) begin
            j_fu_114 <= add_ln54_fu_379_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_114 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_addr_reg_479 <= sext_ln54_fu_369_p1;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln53_reg_460 <= icmp_ln53_fu_283_p2;
        or_ln53_reg_464 <= or_ln53_fu_313_p2;
        select_ln53_1_reg_473 <= select_ln53_1_fu_327_p3;
        select_ln53_1_reg_473_pp0_iter1_reg <= select_ln53_1_reg_473;
        select_ln53_reg_468 <= select_ln53_fu_319_p3;
        select_ln53_reg_468_pp0_iter1_reg <= select_ln53_reg_468;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        bitcast_ln56_reg_489 <= bitcast_ln56_fu_409_p1;
        select_ln53_1_reg_473_pp0_iter2_reg <= select_ln53_1_reg_473_pp0_iter1_reg;
        select_ln53_1_reg_473_pp0_iter3_reg <= select_ln53_1_reg_473_pp0_iter2_reg;
        select_ln53_1_reg_473_pp0_iter4_reg <= select_ln53_1_reg_473_pp0_iter3_reg;
        select_ln53_1_reg_473_pp0_iter5_reg <= select_ln53_1_reg_473_pp0_iter4_reg;
        select_ln53_1_reg_473_pp0_iter6_reg <= select_ln53_1_reg_473_pp0_iter5_reg;
        select_ln53_1_reg_473_pp0_iter7_reg <= select_ln53_1_reg_473_pp0_iter6_reg;
        select_ln53_1_reg_473_pp0_iter8_reg <= select_ln53_1_reg_473_pp0_iter7_reg;
        select_ln53_1_reg_473_pp0_iter9_reg <= select_ln53_1_reg_473_pp0_iter8_reg;
        select_ln53_reg_468_pp0_iter2_reg <= select_ln53_reg_468_pp0_iter1_reg;
        select_ln53_reg_468_pp0_iter3_reg <= select_ln53_reg_468_pp0_iter2_reg;
        select_ln53_reg_468_pp0_iter4_reg <= select_ln53_reg_468_pp0_iter3_reg;
        select_ln53_reg_468_pp0_iter5_reg <= select_ln53_reg_468_pp0_iter4_reg;
        select_ln53_reg_468_pp0_iter6_reg <= select_ln53_reg_468_pp0_iter5_reg;
        select_ln53_reg_468_pp0_iter7_reg <= select_ln53_reg_468_pp0_iter6_reg;
        select_ln53_reg_468_pp0_iter8_reg <= select_ln53_reg_468_pp0_iter7_reg;
        select_ln53_reg_468_pp0_iter9_reg <= select_ln53_reg_468_pp0_iter8_reg;
        trunc_ln2_reg_485 <= {{select_ln53_1_reg_473_pp0_iter8_reg[5:3]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (or_ln53_reg_464 == 1'd1))) begin
        B_blk_n_AR = m_axi_B_ARREADY;
    end else begin
        B_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_blk_n_R = m_axi_B_RVALID;
    end else begin
        B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_1_ce0 = 1'b1;
    end else begin
        Bbuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_1_we0 = 1'b1;
    end else begin
        Bbuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_2_ce0 = 1'b1;
    end else begin
        Bbuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_2_we0 = 1'b1;
    end else begin
        Bbuf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_3_ce0 = 1'b1;
    end else begin
        Bbuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_3_we0 = 1'b1;
    end else begin
        Bbuf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_4_ce0 = 1'b1;
    end else begin
        Bbuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_4_we0 = 1'b1;
    end else begin
        Bbuf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_5_ce0 = 1'b1;
    end else begin
        Bbuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_5_we0 = 1'b1;
    end else begin
        Bbuf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_6_ce0 = 1'b1;
    end else begin
        Bbuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_6_we0 = 1'b1;
    end else begin
        Bbuf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_7_ce0 = 1'b1;
    end else begin
        Bbuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_7_we0 = 1'b1;
    end else begin
        Bbuf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_ce0 = 1'b1;
    end else begin
        Bbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln2_reg_485 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_we0 = 1'b1;
    end else begin
        Bbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_fu_283_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_600)) begin
            ap_phi_mux_first_iter_1_phi_fu_257_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_1_phi_fu_257_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_1_phi_fu_257_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_1_phi_fu_257_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_118;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten134_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten134_load = indvar_flatten134_fu_122;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_114;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln53_reg_464 == 1'd1))) begin
        m_axi_B_ARVALID = 1'b1;
    end else begin
        m_axi_B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_B_RREADY = 1'b1;
    end else begin
        m_axi_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bbuf_1_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_1_d0 = bitcast_ln56_reg_489;

assign Bbuf_2_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_2_d0 = bitcast_ln56_reg_489;

assign Bbuf_3_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_3_d0 = bitcast_ln56_reg_489;

assign Bbuf_4_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_4_d0 = bitcast_ln56_reg_489;

assign Bbuf_5_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_5_d0 = bitcast_ln56_reg_489;

assign Bbuf_6_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_6_d0 = bitcast_ln56_reg_489;

assign Bbuf_7_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_7_d0 = bitcast_ln56_reg_489;

assign Bbuf_address0 = zext_ln56_1_fu_427_p1;

assign Bbuf_d0 = bitcast_ln56_reg_489;

assign add_ln53_1_fu_301_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln53_2_fu_289_p2 = (ap_sig_allocacmp_indvar_flatten134_load + 11'd1);

assign add_ln53_fu_353_p2 = (zext_ln53_fu_349_p1 + B_offset);

assign add_ln54_fu_379_p2 = (select_ln53_fu_319_p3 + 5'd1);

assign add_ln56_fu_421_p2 = (shl_ln56_fu_413_p2 + zext_ln56_fu_418_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (m_axi_B_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_B_ARREADY == 1'b0) & (or_ln53_reg_464 == 1'd1));
end

always @ (*) begin
    ap_condition_600 = ((icmp_ln53_reg_460 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln56_fu_409_p1 = m_axi_B_RDATA;

assign icmp_ln53_fu_283_p2 = ((ap_sig_allocacmp_indvar_flatten134_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_307_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign m_axi_B_ARADDR = B_addr_reg_479;

assign m_axi_B_ARBURST = 2'd0;

assign m_axi_B_ARCACHE = 4'd0;

assign m_axi_B_ARID = 1'd0;

assign m_axi_B_ARLEN = 32'd16;

assign m_axi_B_ARLOCK = 2'd0;

assign m_axi_B_ARPROT = 3'd0;

assign m_axi_B_ARQOS = 4'd0;

assign m_axi_B_ARREGION = 4'd0;

assign m_axi_B_ARSIZE = 3'd0;

assign m_axi_B_ARUSER = 1'd0;

assign m_axi_B_AWADDR = 64'd0;

assign m_axi_B_AWBURST = 2'd0;

assign m_axi_B_AWCACHE = 4'd0;

assign m_axi_B_AWID = 1'd0;

assign m_axi_B_AWLEN = 32'd0;

assign m_axi_B_AWLOCK = 2'd0;

assign m_axi_B_AWPROT = 3'd0;

assign m_axi_B_AWQOS = 4'd0;

assign m_axi_B_AWREGION = 4'd0;

assign m_axi_B_AWSIZE = 3'd0;

assign m_axi_B_AWUSER = 1'd0;

assign m_axi_B_AWVALID = 1'b0;

assign m_axi_B_BREADY = 1'b0;

assign m_axi_B_WDATA = 32'd0;

assign m_axi_B_WID = 1'd0;

assign m_axi_B_WLAST = 1'b0;

assign m_axi_B_WSTRB = 4'd0;

assign m_axi_B_WUSER = 1'd0;

assign m_axi_B_WVALID = 1'b0;

assign or_ln53_fu_313_p2 = (icmp_ln54_fu_307_p2 | ap_phi_mux_first_iter_1_phi_fu_257_p4);

assign select_ln53_1_fu_327_p3 = ((icmp_ln54_fu_307_p2[0:0] == 1'b1) ? add_ln53_1_fu_301_p2 : ap_sig_allocacmp_i_load);

assign select_ln53_fu_319_p3 = ((icmp_ln54_fu_307_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sext_ln54_fu_369_p1 = $signed(trunc_ln1_fu_359_p4);

assign shl_ln53_1_fu_339_p4 = {{{trunc_ln53_fu_335_p1}, {empty}}, {6'd0}};

assign shl_ln56_fu_413_p2 = select_ln53_1_reg_473_pp0_iter9_reg << 7'd4;

assign trunc_ln1_fu_359_p4 = {{add_ln53_fu_353_p2[63:2]}};

assign trunc_ln53_fu_335_p1 = select_ln53_1_fu_327_p3[5:0];

assign zext_ln53_fu_349_p1 = shl_ln53_1_fu_339_p4;

assign zext_ln56_1_fu_427_p1 = add_ln56_fu_421_p2;

assign zext_ln56_fu_418_p1 = select_ln53_reg_468_pp0_iter9_reg;

endmodule //mmult_mmult_Pipeline_LOOPB1_LOOPB2

-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_mmult_Pipeline_LOOPA1_LOOPA2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_A_AWVALID : OUT STD_LOGIC;
    m_axi_A_AWREADY : IN STD_LOGIC;
    m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_WVALID : OUT STD_LOGIC;
    m_axi_A_WREADY : IN STD_LOGIC;
    m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_WLAST : OUT STD_LOGIC;
    m_axi_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_ARVALID : OUT STD_LOGIC;
    m_axi_A_ARREADY : IN STD_LOGIC;
    m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RVALID : IN STD_LOGIC;
    m_axi_A_RREADY : OUT STD_LOGIC;
    m_axi_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_RLAST : IN STD_LOGIC;
    m_axi_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BVALID : IN STD_LOGIC;
    m_axi_A_BREADY : OUT STD_LOGIC;
    m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln43 : IN STD_LOGIC_VECTOR (61 downto 0);
    Abuf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_ce0 : OUT STD_LOGIC;
    Abuf_we0 : OUT STD_LOGIC;
    Abuf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_1_ce0 : OUT STD_LOGIC;
    Abuf_1_we0 : OUT STD_LOGIC;
    Abuf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_2_ce0 : OUT STD_LOGIC;
    Abuf_2_we0 : OUT STD_LOGIC;
    Abuf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_3_ce0 : OUT STD_LOGIC;
    Abuf_3_we0 : OUT STD_LOGIC;
    Abuf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_4_ce0 : OUT STD_LOGIC;
    Abuf_4_we0 : OUT STD_LOGIC;
    Abuf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_5_ce0 : OUT STD_LOGIC;
    Abuf_5_we0 : OUT STD_LOGIC;
    Abuf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_6_ce0 : OUT STD_LOGIC;
    Abuf_6_we0 : OUT STD_LOGIC;
    Abuf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Abuf_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Abuf_7_ce0 : OUT STD_LOGIC;
    Abuf_7_we0 : OUT STD_LOGIC;
    Abuf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mmult_mmult_Pipeline_LOOPA1_LOOPA2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln46_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal A_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln47_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln47_1_fu_283_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_1_reg_398 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln_reg_403 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_addr_read_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln47_fu_297_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_98 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln46_1_fu_317_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln46_1_fu_249_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln49_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_fu_275_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln47_fu_324_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_328_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mmult_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mmult_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_98 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_98 <= select_ln46_1_fu_317_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln46_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_102 <= add_ln46_1_fu_249_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_94 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_94 <= add_ln47_fu_297_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                A_addr_read_reg_407 <= m_axi_A_RDATA;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln47_reg_393 <= icmp_ln47_fu_269_p2;
                trunc_ln47_1_reg_398 <= trunc_ln47_1_fu_283_p1;
                trunc_ln_reg_403 <= select_ln46_fu_275_p3(5 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    A_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_A_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_blk_n_R <= m_axi_A_RVALID;
        else 
            A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    Abuf_1_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_1_ce0 <= ap_const_logic_1;
        else 
            Abuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_1_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_1_we0 <= ap_const_logic_1;
        else 
            Abuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_2_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_2_ce0 <= ap_const_logic_1;
        else 
            Abuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_2_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_2_we0 <= ap_const_logic_1;
        else 
            Abuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_3_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_3_ce0 <= ap_const_logic_1;
        else 
            Abuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_3_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_3_we0 <= ap_const_logic_1;
        else 
            Abuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_4_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_4_ce0 <= ap_const_logic_1;
        else 
            Abuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_4_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_4_we0 <= ap_const_logic_1;
        else 
            Abuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_5_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_5_ce0 <= ap_const_logic_1;
        else 
            Abuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_5_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_5_we0 <= ap_const_logic_1;
        else 
            Abuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_6_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_6_ce0 <= ap_const_logic_1;
        else 
            Abuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_6_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_6_we0 <= ap_const_logic_1;
        else 
            Abuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_7_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_7_ce0 <= ap_const_logic_1;
        else 
            Abuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_7_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_7_we0 <= ap_const_logic_1;
        else 
            Abuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_address0 <= zext_ln49_fu_335_p1(7 - 1 downto 0);

    Abuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_ce0 <= ap_const_logic_1;
        else 
            Abuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Abuf_d0 <= bitcast_ln49_fu_347_p1;

    Abuf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln_reg_403)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln_reg_403 = ap_const_lv3_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Abuf_we0 <= ap_const_logic_1;
        else 
            Abuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln46_1_fu_249_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln46_fu_311_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv5_1));
    add_ln47_fu_297_p2 <= std_logic_vector(unsigned(select_ln46_fu_275_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_A_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_A_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln46_fu_243_p2)
    begin
        if (((icmp_ln46_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;

    bitcast_ln49_fu_347_p1 <= A_addr_read_reg_407;
    icmp_ln46_fu_243_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_400) else "0";
    icmp_ln47_fu_269_p2 <= "1" when (j_fu_94 = ap_const_lv7_40) else "0";
    m_axi_A_ARADDR <= ap_const_lv64_0;
    m_axi_A_ARBURST <= ap_const_lv2_0;
    m_axi_A_ARCACHE <= ap_const_lv4_0;
    m_axi_A_ARID <= ap_const_lv1_0;
    m_axi_A_ARLEN <= ap_const_lv32_0;
    m_axi_A_ARLOCK <= ap_const_lv2_0;
    m_axi_A_ARPROT <= ap_const_lv3_0;
    m_axi_A_ARQOS <= ap_const_lv4_0;
    m_axi_A_ARREGION <= ap_const_lv4_0;
    m_axi_A_ARSIZE <= ap_const_lv3_0;
    m_axi_A_ARUSER <= ap_const_lv1_0;
    m_axi_A_ARVALID <= ap_const_logic_0;
    m_axi_A_AWADDR <= ap_const_lv64_0;
    m_axi_A_AWBURST <= ap_const_lv2_0;
    m_axi_A_AWCACHE <= ap_const_lv4_0;
    m_axi_A_AWID <= ap_const_lv1_0;
    m_axi_A_AWLEN <= ap_const_lv32_0;
    m_axi_A_AWLOCK <= ap_const_lv2_0;
    m_axi_A_AWPROT <= ap_const_lv3_0;
    m_axi_A_AWQOS <= ap_const_lv4_0;
    m_axi_A_AWREGION <= ap_const_lv4_0;
    m_axi_A_AWSIZE <= ap_const_lv3_0;
    m_axi_A_AWUSER <= ap_const_lv1_0;
    m_axi_A_AWVALID <= ap_const_logic_0;
    m_axi_A_BREADY <= ap_const_logic_0;

    m_axi_A_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_A_RREADY <= ap_const_logic_1;
        else 
            m_axi_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_WDATA <= ap_const_lv32_0;
    m_axi_A_WID <= ap_const_lv1_0;
    m_axi_A_WLAST <= ap_const_logic_0;
    m_axi_A_WSTRB <= ap_const_lv4_0;
    m_axi_A_WUSER <= ap_const_lv1_0;
    m_axi_A_WVALID <= ap_const_logic_0;
    select_ln46_1_fu_317_p3 <= 
        add_ln46_fu_311_p2 when (icmp_ln47_reg_393(0) = '1') else 
        i_fu_98;
    select_ln46_fu_275_p3 <= 
        ap_const_lv7_0 when (icmp_ln47_fu_269_p2(0) = '1') else 
        j_fu_94;
    tmp_3_fu_328_p3 <= (trunc_ln47_fu_324_p1 & trunc_ln47_1_reg_398);
    trunc_ln47_1_fu_283_p1 <= select_ln46_fu_275_p3(3 - 1 downto 0);
    trunc_ln47_fu_324_p1 <= select_ln46_1_fu_317_p3(4 - 1 downto 0);
    zext_ln49_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_328_p3),64));
end behav;

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mmult_mmult_Pipeline_LOOP1_LOOP2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_A_AWVALID,
        m_axi_A_AWREADY,
        m_axi_A_AWADDR,
        m_axi_A_AWID,
        m_axi_A_AWLEN,
        m_axi_A_AWSIZE,
        m_axi_A_AWBURST,
        m_axi_A_AWLOCK,
        m_axi_A_AWCACHE,
        m_axi_A_AWPROT,
        m_axi_A_AWQOS,
        m_axi_A_AWREGION,
        m_axi_A_AWUSER,
        m_axi_A_WVALID,
        m_axi_A_WREADY,
        m_axi_A_WDATA,
        m_axi_A_WSTRB,
        m_axi_A_WLAST,
        m_axi_A_WID,
        m_axi_A_WUSER,
        m_axi_A_ARVALID,
        m_axi_A_ARREADY,
        m_axi_A_ARADDR,
        m_axi_A_ARID,
        m_axi_A_ARLEN,
        m_axi_A_ARSIZE,
        m_axi_A_ARBURST,
        m_axi_A_ARLOCK,
        m_axi_A_ARCACHE,
        m_axi_A_ARPROT,
        m_axi_A_ARQOS,
        m_axi_A_ARREGION,
        m_axi_A_ARUSER,
        m_axi_A_RVALID,
        m_axi_A_RREADY,
        m_axi_A_RDATA,
        m_axi_A_RLAST,
        m_axi_A_RID,
        m_axi_A_RFIFONUM,
        m_axi_A_RUSER,
        m_axi_A_RRESP,
        m_axi_A_BVALID,
        m_axi_A_BREADY,
        m_axi_A_BRESP,
        m_axi_A_BID,
        m_axi_A_BUSER,
        m_axi_B_AWVALID,
        m_axi_B_AWREADY,
        m_axi_B_AWADDR,
        m_axi_B_AWID,
        m_axi_B_AWLEN,
        m_axi_B_AWSIZE,
        m_axi_B_AWBURST,
        m_axi_B_AWLOCK,
        m_axi_B_AWCACHE,
        m_axi_B_AWPROT,
        m_axi_B_AWQOS,
        m_axi_B_AWREGION,
        m_axi_B_AWUSER,
        m_axi_B_WVALID,
        m_axi_B_WREADY,
        m_axi_B_WDATA,
        m_axi_B_WSTRB,
        m_axi_B_WLAST,
        m_axi_B_WID,
        m_axi_B_WUSER,
        m_axi_B_ARVALID,
        m_axi_B_ARREADY,
        m_axi_B_ARADDR,
        m_axi_B_ARID,
        m_axi_B_ARLEN,
        m_axi_B_ARSIZE,
        m_axi_B_ARBURST,
        m_axi_B_ARLOCK,
        m_axi_B_ARCACHE,
        m_axi_B_ARPROT,
        m_axi_B_ARQOS,
        m_axi_B_ARREGION,
        m_axi_B_ARUSER,
        m_axi_B_RVALID,
        m_axi_B_RREADY,
        m_axi_B_RDATA,
        m_axi_B_RLAST,
        m_axi_B_RID,
        m_axi_B_RFIFONUM,
        m_axi_B_RUSER,
        m_axi_B_RRESP,
        m_axi_B_BVALID,
        m_axi_B_BREADY,
        m_axi_B_BRESP,
        m_axi_B_BID,
        m_axi_B_BUSER,
        sext_ln29_1,
        sext_ln29,
        Bbuf_address0,
        Bbuf_ce0,
        Bbuf_we0,
        Bbuf_d0,
        Bbuf_1_address0,
        Bbuf_1_ce0,
        Bbuf_1_we0,
        Bbuf_1_d0,
        Bbuf_2_address0,
        Bbuf_2_ce0,
        Bbuf_2_we0,
        Bbuf_2_d0,
        Bbuf_3_address0,
        Bbuf_3_ce0,
        Bbuf_3_we0,
        Bbuf_3_d0,
        Bbuf_4_address0,
        Bbuf_4_ce0,
        Bbuf_4_we0,
        Bbuf_4_d0,
        Bbuf_5_address0,
        Bbuf_5_ce0,
        Bbuf_5_we0,
        Bbuf_5_d0,
        Bbuf_6_address0,
        Bbuf_6_ce0,
        Bbuf_6_we0,
        Bbuf_6_d0,
        Bbuf_7_address0,
        Bbuf_7_ce0,
        Bbuf_7_we0,
        Bbuf_7_d0,
        Bbuf_8_address0,
        Bbuf_8_ce0,
        Bbuf_8_we0,
        Bbuf_8_d0,
        Bbuf_9_address0,
        Bbuf_9_ce0,
        Bbuf_9_we0,
        Bbuf_9_d0,
        Bbuf_10_address0,
        Bbuf_10_ce0,
        Bbuf_10_we0,
        Bbuf_10_d0,
        Bbuf_11_address0,
        Bbuf_11_ce0,
        Bbuf_11_we0,
        Bbuf_11_d0,
        Bbuf_12_address0,
        Bbuf_12_ce0,
        Bbuf_12_we0,
        Bbuf_12_d0,
        Bbuf_13_address0,
        Bbuf_13_ce0,
        Bbuf_13_we0,
        Bbuf_13_d0,
        Bbuf_14_address0,
        Bbuf_14_ce0,
        Bbuf_14_we0,
        Bbuf_14_d0,
        Bbuf_15_address0,
        Bbuf_15_ce0,
        Bbuf_15_we0,
        Bbuf_15_d0,
        Abuf_address0,
        Abuf_ce0,
        Abuf_we0,
        Abuf_d0,
        Abuf_1_address0,
        Abuf_1_ce0,
        Abuf_1_we0,
        Abuf_1_d0,
        Abuf_2_address0,
        Abuf_2_ce0,
        Abuf_2_we0,
        Abuf_2_d0,
        Abuf_3_address0,
        Abuf_3_ce0,
        Abuf_3_we0,
        Abuf_3_d0,
        Abuf_4_address0,
        Abuf_4_ce0,
        Abuf_4_we0,
        Abuf_4_d0,
        Abuf_5_address0,
        Abuf_5_ce0,
        Abuf_5_we0,
        Abuf_5_d0,
        Abuf_6_address0,
        Abuf_6_ce0,
        Abuf_6_we0,
        Abuf_6_d0,
        Abuf_7_address0,
        Abuf_7_ce0,
        Abuf_7_we0,
        Abuf_7_d0,
        Abuf_8_address0,
        Abuf_8_ce0,
        Abuf_8_we0,
        Abuf_8_d0,
        Abuf_9_address0,
        Abuf_9_ce0,
        Abuf_9_we0,
        Abuf_9_d0,
        Abuf_10_address0,
        Abuf_10_ce0,
        Abuf_10_we0,
        Abuf_10_d0,
        Abuf_11_address0,
        Abuf_11_ce0,
        Abuf_11_we0,
        Abuf_11_d0,
        Abuf_12_address0,
        Abuf_12_ce0,
        Abuf_12_we0,
        Abuf_12_d0,
        Abuf_13_address0,
        Abuf_13_ce0,
        Abuf_13_we0,
        Abuf_13_d0,
        Abuf_14_address0,
        Abuf_14_ce0,
        Abuf_14_we0,
        Abuf_14_d0,
        Abuf_15_address0,
        Abuf_15_ce0,
        Abuf_15_we0,
        Abuf_15_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_A_AWVALID;
input   m_axi_A_AWREADY;
output  [63:0] m_axi_A_AWADDR;
output  [0:0] m_axi_A_AWID;
output  [31:0] m_axi_A_AWLEN;
output  [2:0] m_axi_A_AWSIZE;
output  [1:0] m_axi_A_AWBURST;
output  [1:0] m_axi_A_AWLOCK;
output  [3:0] m_axi_A_AWCACHE;
output  [2:0] m_axi_A_AWPROT;
output  [3:0] m_axi_A_AWQOS;
output  [3:0] m_axi_A_AWREGION;
output  [0:0] m_axi_A_AWUSER;
output   m_axi_A_WVALID;
input   m_axi_A_WREADY;
output  [31:0] m_axi_A_WDATA;
output  [3:0] m_axi_A_WSTRB;
output   m_axi_A_WLAST;
output  [0:0] m_axi_A_WID;
output  [0:0] m_axi_A_WUSER;
output   m_axi_A_ARVALID;
input   m_axi_A_ARREADY;
output  [63:0] m_axi_A_ARADDR;
output  [0:0] m_axi_A_ARID;
output  [31:0] m_axi_A_ARLEN;
output  [2:0] m_axi_A_ARSIZE;
output  [1:0] m_axi_A_ARBURST;
output  [1:0] m_axi_A_ARLOCK;
output  [3:0] m_axi_A_ARCACHE;
output  [2:0] m_axi_A_ARPROT;
output  [3:0] m_axi_A_ARQOS;
output  [3:0] m_axi_A_ARREGION;
output  [0:0] m_axi_A_ARUSER;
input   m_axi_A_RVALID;
output   m_axi_A_RREADY;
input  [31:0] m_axi_A_RDATA;
input   m_axi_A_RLAST;
input  [0:0] m_axi_A_RID;
input  [8:0] m_axi_A_RFIFONUM;
input  [0:0] m_axi_A_RUSER;
input  [1:0] m_axi_A_RRESP;
input   m_axi_A_BVALID;
output   m_axi_A_BREADY;
input  [1:0] m_axi_A_BRESP;
input  [0:0] m_axi_A_BID;
input  [0:0] m_axi_A_BUSER;
output   m_axi_B_AWVALID;
input   m_axi_B_AWREADY;
output  [63:0] m_axi_B_AWADDR;
output  [0:0] m_axi_B_AWID;
output  [31:0] m_axi_B_AWLEN;
output  [2:0] m_axi_B_AWSIZE;
output  [1:0] m_axi_B_AWBURST;
output  [1:0] m_axi_B_AWLOCK;
output  [3:0] m_axi_B_AWCACHE;
output  [2:0] m_axi_B_AWPROT;
output  [3:0] m_axi_B_AWQOS;
output  [3:0] m_axi_B_AWREGION;
output  [0:0] m_axi_B_AWUSER;
output   m_axi_B_WVALID;
input   m_axi_B_WREADY;
output  [31:0] m_axi_B_WDATA;
output  [3:0] m_axi_B_WSTRB;
output   m_axi_B_WLAST;
output  [0:0] m_axi_B_WID;
output  [0:0] m_axi_B_WUSER;
output   m_axi_B_ARVALID;
input   m_axi_B_ARREADY;
output  [63:0] m_axi_B_ARADDR;
output  [0:0] m_axi_B_ARID;
output  [31:0] m_axi_B_ARLEN;
output  [2:0] m_axi_B_ARSIZE;
output  [1:0] m_axi_B_ARBURST;
output  [1:0] m_axi_B_ARLOCK;
output  [3:0] m_axi_B_ARCACHE;
output  [2:0] m_axi_B_ARPROT;
output  [3:0] m_axi_B_ARQOS;
output  [3:0] m_axi_B_ARREGION;
output  [0:0] m_axi_B_ARUSER;
input   m_axi_B_RVALID;
output   m_axi_B_RREADY;
input  [31:0] m_axi_B_RDATA;
input   m_axi_B_RLAST;
input  [0:0] m_axi_B_RID;
input  [8:0] m_axi_B_RFIFONUM;
input  [0:0] m_axi_B_RUSER;
input  [1:0] m_axi_B_RRESP;
input   m_axi_B_BVALID;
output   m_axi_B_BREADY;
input  [1:0] m_axi_B_BRESP;
input  [0:0] m_axi_B_BID;
input  [0:0] m_axi_B_BUSER;
input  [61:0] sext_ln29_1;
input  [61:0] sext_ln29;
output  [5:0] Bbuf_address0;
output   Bbuf_ce0;
output   Bbuf_we0;
output  [31:0] Bbuf_d0;
output  [5:0] Bbuf_1_address0;
output   Bbuf_1_ce0;
output   Bbuf_1_we0;
output  [31:0] Bbuf_1_d0;
output  [5:0] Bbuf_2_address0;
output   Bbuf_2_ce0;
output   Bbuf_2_we0;
output  [31:0] Bbuf_2_d0;
output  [5:0] Bbuf_3_address0;
output   Bbuf_3_ce0;
output   Bbuf_3_we0;
output  [31:0] Bbuf_3_d0;
output  [5:0] Bbuf_4_address0;
output   Bbuf_4_ce0;
output   Bbuf_4_we0;
output  [31:0] Bbuf_4_d0;
output  [5:0] Bbuf_5_address0;
output   Bbuf_5_ce0;
output   Bbuf_5_we0;
output  [31:0] Bbuf_5_d0;
output  [5:0] Bbuf_6_address0;
output   Bbuf_6_ce0;
output   Bbuf_6_we0;
output  [31:0] Bbuf_6_d0;
output  [5:0] Bbuf_7_address0;
output   Bbuf_7_ce0;
output   Bbuf_7_we0;
output  [31:0] Bbuf_7_d0;
output  [5:0] Bbuf_8_address0;
output   Bbuf_8_ce0;
output   Bbuf_8_we0;
output  [31:0] Bbuf_8_d0;
output  [5:0] Bbuf_9_address0;
output   Bbuf_9_ce0;
output   Bbuf_9_we0;
output  [31:0] Bbuf_9_d0;
output  [5:0] Bbuf_10_address0;
output   Bbuf_10_ce0;
output   Bbuf_10_we0;
output  [31:0] Bbuf_10_d0;
output  [5:0] Bbuf_11_address0;
output   Bbuf_11_ce0;
output   Bbuf_11_we0;
output  [31:0] Bbuf_11_d0;
output  [5:0] Bbuf_12_address0;
output   Bbuf_12_ce0;
output   Bbuf_12_we0;
output  [31:0] Bbuf_12_d0;
output  [5:0] Bbuf_13_address0;
output   Bbuf_13_ce0;
output   Bbuf_13_we0;
output  [31:0] Bbuf_13_d0;
output  [5:0] Bbuf_14_address0;
output   Bbuf_14_ce0;
output   Bbuf_14_we0;
output  [31:0] Bbuf_14_d0;
output  [5:0] Bbuf_15_address0;
output   Bbuf_15_ce0;
output   Bbuf_15_we0;
output  [31:0] Bbuf_15_d0;
output  [5:0] Abuf_address0;
output   Abuf_ce0;
output   Abuf_we0;
output  [31:0] Abuf_d0;
output  [5:0] Abuf_1_address0;
output   Abuf_1_ce0;
output   Abuf_1_we0;
output  [31:0] Abuf_1_d0;
output  [5:0] Abuf_2_address0;
output   Abuf_2_ce0;
output   Abuf_2_we0;
output  [31:0] Abuf_2_d0;
output  [5:0] Abuf_3_address0;
output   Abuf_3_ce0;
output   Abuf_3_we0;
output  [31:0] Abuf_3_d0;
output  [5:0] Abuf_4_address0;
output   Abuf_4_ce0;
output   Abuf_4_we0;
output  [31:0] Abuf_4_d0;
output  [5:0] Abuf_5_address0;
output   Abuf_5_ce0;
output   Abuf_5_we0;
output  [31:0] Abuf_5_d0;
output  [5:0] Abuf_6_address0;
output   Abuf_6_ce0;
output   Abuf_6_we0;
output  [31:0] Abuf_6_d0;
output  [5:0] Abuf_7_address0;
output   Abuf_7_ce0;
output   Abuf_7_we0;
output  [31:0] Abuf_7_d0;
output  [5:0] Abuf_8_address0;
output   Abuf_8_ce0;
output   Abuf_8_we0;
output  [31:0] Abuf_8_d0;
output  [5:0] Abuf_9_address0;
output   Abuf_9_ce0;
output   Abuf_9_we0;
output  [31:0] Abuf_9_d0;
output  [5:0] Abuf_10_address0;
output   Abuf_10_ce0;
output   Abuf_10_we0;
output  [31:0] Abuf_10_d0;
output  [5:0] Abuf_11_address0;
output   Abuf_11_ce0;
output   Abuf_11_we0;
output  [31:0] Abuf_11_d0;
output  [5:0] Abuf_12_address0;
output   Abuf_12_ce0;
output   Abuf_12_we0;
output  [31:0] Abuf_12_d0;
output  [5:0] Abuf_13_address0;
output   Abuf_13_ce0;
output   Abuf_13_we0;
output  [31:0] Abuf_13_d0;
output  [5:0] Abuf_14_address0;
output   Abuf_14_ce0;
output   Abuf_14_we0;
output  [31:0] Abuf_14_d0;
output  [5:0] Abuf_15_address0;
output   Abuf_15_ce0;
output   Abuf_15_we0;
output  [31:0] Abuf_15_d0;

reg ap_idle;
reg m_axi_A_RREADY;
reg m_axi_B_RREADY;
reg Bbuf_ce0;
reg Bbuf_we0;
reg Bbuf_1_ce0;
reg Bbuf_1_we0;
reg Bbuf_2_ce0;
reg Bbuf_2_we0;
reg Bbuf_3_ce0;
reg Bbuf_3_we0;
reg Bbuf_4_ce0;
reg Bbuf_4_we0;
reg Bbuf_5_ce0;
reg Bbuf_5_we0;
reg Bbuf_6_ce0;
reg Bbuf_6_we0;
reg Bbuf_7_ce0;
reg Bbuf_7_we0;
reg Bbuf_8_ce0;
reg Bbuf_8_we0;
reg Bbuf_9_ce0;
reg Bbuf_9_we0;
reg Bbuf_10_ce0;
reg Bbuf_10_we0;
reg Bbuf_11_ce0;
reg Bbuf_11_we0;
reg Bbuf_12_ce0;
reg Bbuf_12_we0;
reg Bbuf_13_ce0;
reg Bbuf_13_we0;
reg Bbuf_14_ce0;
reg Bbuf_14_we0;
reg Bbuf_15_ce0;
reg Bbuf_15_we0;
reg Abuf_ce0;
reg Abuf_we0;
reg Abuf_1_ce0;
reg Abuf_1_we0;
reg Abuf_2_ce0;
reg Abuf_2_we0;
reg Abuf_3_ce0;
reg Abuf_3_we0;
reg Abuf_4_ce0;
reg Abuf_4_we0;
reg Abuf_5_ce0;
reg Abuf_5_we0;
reg Abuf_6_ce0;
reg Abuf_6_we0;
reg Abuf_7_ce0;
reg Abuf_7_we0;
reg Abuf_8_ce0;
reg Abuf_8_we0;
reg Abuf_9_ce0;
reg Abuf_9_we0;
reg Abuf_10_ce0;
reg Abuf_10_we0;
reg Abuf_11_ce0;
reg Abuf_11_we0;
reg Abuf_12_ce0;
reg Abuf_12_we0;
reg Abuf_13_ce0;
reg Abuf_13_we0;
reg Abuf_14_ce0;
reg Abuf_14_we0;
reg Abuf_15_ce0;
reg Abuf_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_636_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    B_blk_n_R;
wire    ap_block_pp0_stage0;
reg    A_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln30_fu_651_p2;
reg   [0:0] icmp_ln30_reg_841;
wire   [5:0] select_ln29_fu_657_p3;
reg   [5:0] select_ln29_reg_846;
reg   [5:0] select_ln29_reg_846_pp0_iter1_reg;
wire   [0:0] trunc_ln30_fu_665_p1;
reg   [0:0] trunc_ln30_reg_851;
reg   [0:0] trunc_ln30_reg_851_pp0_iter1_reg;
reg   [3:0] trunc_ln2_reg_856;
reg   [3:0] trunc_ln2_reg_856_pp0_iter1_reg;
wire   [5:0] select_ln29_1_fu_716_p3;
reg   [5:0] select_ln29_1_reg_860;
wire   [4:0] trunc_ln33_fu_723_p1;
reg   [4:0] trunc_ln33_reg_865;
reg   [3:0] trunc_ln1_reg_870;
wire   [31:0] bitcast_ln32_fu_737_p1;
reg   [31:0] bitcast_ln32_reg_874;
wire   [31:0] bitcast_ln33_fu_741_p1;
reg   [31:0] bitcast_ln33_reg_894;
wire   [63:0] zext_ln33_fu_760_p1;
wire   [63:0] zext_ln32_fu_786_p1;
reg   [5:0] j_fu_160;
wire   [5:0] add_ln30_fu_679_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_164;
reg   [10:0] indvar_flatten_fu_168;
wire   [10:0] add_ln29_1_fu_642_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [5:0] add_ln29_fu_710_p2;
wire   [5:0] shl_ln33_fu_750_p2;
wire   [5:0] add_ln33_fu_755_p2;
wire   [5:0] tmp_2_fu_780_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_160 = 6'd0;
#0 i_fu_164 = 6'd0;
#0 indvar_flatten_fu_168 = 11'd0;
#0 ap_done_reg = 1'b0;
end

mmult_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_164 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_164 <= select_ln29_1_fu_716_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_636_p2 == 1'd0))) begin
            indvar_flatten_fu_168 <= add_ln29_1_fu_642_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_168 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_636_p2 == 1'd0))) begin
            j_fu_160 <= add_ln30_fu_679_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_160 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        bitcast_ln32_reg_874 <= bitcast_ln32_fu_737_p1;
        bitcast_ln33_reg_894 <= bitcast_ln33_fu_741_p1;
        icmp_ln30_reg_841 <= icmp_ln30_fu_651_p2;
        select_ln29_1_reg_860 <= select_ln29_1_fu_716_p3;
        select_ln29_reg_846 <= select_ln29_fu_657_p3;
        select_ln29_reg_846_pp0_iter1_reg <= select_ln29_reg_846;
        trunc_ln1_reg_870 <= {{select_ln29_1_fu_716_p3[4:1]}};
        trunc_ln2_reg_856 <= {{select_ln29_fu_657_p3[4:1]}};
        trunc_ln2_reg_856_pp0_iter1_reg <= trunc_ln2_reg_856;
        trunc_ln30_reg_851 <= trunc_ln30_fu_665_p1;
        trunc_ln30_reg_851_pp0_iter1_reg <= trunc_ln30_reg_851;
        trunc_ln33_reg_865 <= trunc_ln33_fu_723_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        A_blk_n_R = m_axi_A_RVALID;
    end else begin
        A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_10_ce0 = 1'b1;
    end else begin
        Abuf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_10_we0 = 1'b1;
    end else begin
        Abuf_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_11_ce0 = 1'b1;
    end else begin
        Abuf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_11_we0 = 1'b1;
    end else begin
        Abuf_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_12_ce0 = 1'b1;
    end else begin
        Abuf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_12_we0 = 1'b1;
    end else begin
        Abuf_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_13_ce0 = 1'b1;
    end else begin
        Abuf_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_13_we0 = 1'b1;
    end else begin
        Abuf_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_14_ce0 = 1'b1;
    end else begin
        Abuf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_14_we0 = 1'b1;
    end else begin
        Abuf_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_15_ce0 = 1'b1;
    end else begin
        Abuf_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_15_we0 = 1'b1;
    end else begin
        Abuf_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_1_ce0 = 1'b1;
    end else begin
        Abuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_1_we0 = 1'b1;
    end else begin
        Abuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_2_ce0 = 1'b1;
    end else begin
        Abuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_2_we0 = 1'b1;
    end else begin
        Abuf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_3_ce0 = 1'b1;
    end else begin
        Abuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_3_we0 = 1'b1;
    end else begin
        Abuf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_4_ce0 = 1'b1;
    end else begin
        Abuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_4_we0 = 1'b1;
    end else begin
        Abuf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_5_ce0 = 1'b1;
    end else begin
        Abuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_5_we0 = 1'b1;
    end else begin
        Abuf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_6_ce0 = 1'b1;
    end else begin
        Abuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_6_we0 = 1'b1;
    end else begin
        Abuf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_7_ce0 = 1'b1;
    end else begin
        Abuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_7_we0 = 1'b1;
    end else begin
        Abuf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_8_ce0 = 1'b1;
    end else begin
        Abuf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_8_we0 = 1'b1;
    end else begin
        Abuf_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_9_ce0 = 1'b1;
    end else begin
        Abuf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_9_we0 = 1'b1;
    end else begin
        Abuf_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_ce0 = 1'b1;
    end else begin
        Abuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln2_reg_856_pp0_iter1_reg == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Abuf_we0 = 1'b1;
    end else begin
        Abuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_blk_n_R = m_axi_B_RVALID;
    end else begin
        B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_10_ce0 = 1'b1;
    end else begin
        Bbuf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_10_we0 = 1'b1;
    end else begin
        Bbuf_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_11_ce0 = 1'b1;
    end else begin
        Bbuf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_11_we0 = 1'b1;
    end else begin
        Bbuf_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_12_ce0 = 1'b1;
    end else begin
        Bbuf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_12_we0 = 1'b1;
    end else begin
        Bbuf_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_13_ce0 = 1'b1;
    end else begin
        Bbuf_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_13_we0 = 1'b1;
    end else begin
        Bbuf_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_14_ce0 = 1'b1;
    end else begin
        Bbuf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_14_we0 = 1'b1;
    end else begin
        Bbuf_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_15_ce0 = 1'b1;
    end else begin
        Bbuf_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_15_we0 = 1'b1;
    end else begin
        Bbuf_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_1_ce0 = 1'b1;
    end else begin
        Bbuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_1_we0 = 1'b1;
    end else begin
        Bbuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_2_ce0 = 1'b1;
    end else begin
        Bbuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_2_we0 = 1'b1;
    end else begin
        Bbuf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_3_ce0 = 1'b1;
    end else begin
        Bbuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_3_we0 = 1'b1;
    end else begin
        Bbuf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_4_ce0 = 1'b1;
    end else begin
        Bbuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_4_we0 = 1'b1;
    end else begin
        Bbuf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_5_ce0 = 1'b1;
    end else begin
        Bbuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_5_we0 = 1'b1;
    end else begin
        Bbuf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_6_ce0 = 1'b1;
    end else begin
        Bbuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_6_we0 = 1'b1;
    end else begin
        Bbuf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_7_ce0 = 1'b1;
    end else begin
        Bbuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_7_we0 = 1'b1;
    end else begin
        Bbuf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_8_ce0 = 1'b1;
    end else begin
        Bbuf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_8_we0 = 1'b1;
    end else begin
        Bbuf_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_9_ce0 = 1'b1;
    end else begin
        Bbuf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_9_we0 = 1'b1;
    end else begin
        Bbuf_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_ce0 = 1'b1;
    end else begin
        Bbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_870 == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bbuf_we0 = 1'b1;
    end else begin
        Bbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_fu_636_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_168;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_160;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_A_RREADY = 1'b1;
    end else begin
        m_axi_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_B_RREADY = 1'b1;
    end else begin
        m_axi_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Abuf_10_address0 = zext_ln32_fu_786_p1;

assign Abuf_10_d0 = bitcast_ln32_reg_874;

assign Abuf_11_address0 = zext_ln32_fu_786_p1;

assign Abuf_11_d0 = bitcast_ln32_reg_874;

assign Abuf_12_address0 = zext_ln32_fu_786_p1;

assign Abuf_12_d0 = bitcast_ln32_reg_874;

assign Abuf_13_address0 = zext_ln32_fu_786_p1;

assign Abuf_13_d0 = bitcast_ln32_reg_874;

assign Abuf_14_address0 = zext_ln32_fu_786_p1;

assign Abuf_14_d0 = bitcast_ln32_reg_874;

assign Abuf_15_address0 = zext_ln32_fu_786_p1;

assign Abuf_15_d0 = bitcast_ln32_reg_874;

assign Abuf_1_address0 = zext_ln32_fu_786_p1;

assign Abuf_1_d0 = bitcast_ln32_reg_874;

assign Abuf_2_address0 = zext_ln32_fu_786_p1;

assign Abuf_2_d0 = bitcast_ln32_reg_874;

assign Abuf_3_address0 = zext_ln32_fu_786_p1;

assign Abuf_3_d0 = bitcast_ln32_reg_874;

assign Abuf_4_address0 = zext_ln32_fu_786_p1;

assign Abuf_4_d0 = bitcast_ln32_reg_874;

assign Abuf_5_address0 = zext_ln32_fu_786_p1;

assign Abuf_5_d0 = bitcast_ln32_reg_874;

assign Abuf_6_address0 = zext_ln32_fu_786_p1;

assign Abuf_6_d0 = bitcast_ln32_reg_874;

assign Abuf_7_address0 = zext_ln32_fu_786_p1;

assign Abuf_7_d0 = bitcast_ln32_reg_874;

assign Abuf_8_address0 = zext_ln32_fu_786_p1;

assign Abuf_8_d0 = bitcast_ln32_reg_874;

assign Abuf_9_address0 = zext_ln32_fu_786_p1;

assign Abuf_9_d0 = bitcast_ln32_reg_874;

assign Abuf_address0 = zext_ln32_fu_786_p1;

assign Abuf_d0 = bitcast_ln32_reg_874;

assign Bbuf_10_address0 = zext_ln33_fu_760_p1;

assign Bbuf_10_d0 = bitcast_ln33_reg_894;

assign Bbuf_11_address0 = zext_ln33_fu_760_p1;

assign Bbuf_11_d0 = bitcast_ln33_reg_894;

assign Bbuf_12_address0 = zext_ln33_fu_760_p1;

assign Bbuf_12_d0 = bitcast_ln33_reg_894;

assign Bbuf_13_address0 = zext_ln33_fu_760_p1;

assign Bbuf_13_d0 = bitcast_ln33_reg_894;

assign Bbuf_14_address0 = zext_ln33_fu_760_p1;

assign Bbuf_14_d0 = bitcast_ln33_reg_894;

assign Bbuf_15_address0 = zext_ln33_fu_760_p1;

assign Bbuf_15_d0 = bitcast_ln33_reg_894;

assign Bbuf_1_address0 = zext_ln33_fu_760_p1;

assign Bbuf_1_d0 = bitcast_ln33_reg_894;

assign Bbuf_2_address0 = zext_ln33_fu_760_p1;

assign Bbuf_2_d0 = bitcast_ln33_reg_894;

assign Bbuf_3_address0 = zext_ln33_fu_760_p1;

assign Bbuf_3_d0 = bitcast_ln33_reg_894;

assign Bbuf_4_address0 = zext_ln33_fu_760_p1;

assign Bbuf_4_d0 = bitcast_ln33_reg_894;

assign Bbuf_5_address0 = zext_ln33_fu_760_p1;

assign Bbuf_5_d0 = bitcast_ln33_reg_894;

assign Bbuf_6_address0 = zext_ln33_fu_760_p1;

assign Bbuf_6_d0 = bitcast_ln33_reg_894;

assign Bbuf_7_address0 = zext_ln33_fu_760_p1;

assign Bbuf_7_d0 = bitcast_ln33_reg_894;

assign Bbuf_8_address0 = zext_ln33_fu_760_p1;

assign Bbuf_8_d0 = bitcast_ln33_reg_894;

assign Bbuf_9_address0 = zext_ln33_fu_760_p1;

assign Bbuf_9_d0 = bitcast_ln33_reg_894;

assign Bbuf_address0 = zext_ln33_fu_760_p1;

assign Bbuf_d0 = bitcast_ln33_reg_894;

assign add_ln29_1_fu_642_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln29_fu_710_p2 = (i_fu_164 + 6'd1);

assign add_ln30_fu_679_p2 = (select_ln29_fu_657_p3 + 6'd1);

assign add_ln33_fu_755_p2 = (shl_ln33_fu_750_p2 + select_ln29_reg_846_pp0_iter1_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((m_axi_A_RVALID == 1'b0) | (m_axi_B_RVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln32_fu_737_p1 = m_axi_A_RDATA;

assign bitcast_ln33_fu_741_p1 = m_axi_B_RDATA;

assign icmp_ln29_fu_636_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_651_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign m_axi_A_ARADDR = 64'd0;

assign m_axi_A_ARBURST = 2'd0;

assign m_axi_A_ARCACHE = 4'd0;

assign m_axi_A_ARID = 1'd0;

assign m_axi_A_ARLEN = 32'd0;

assign m_axi_A_ARLOCK = 2'd0;

assign m_axi_A_ARPROT = 3'd0;

assign m_axi_A_ARQOS = 4'd0;

assign m_axi_A_ARREGION = 4'd0;

assign m_axi_A_ARSIZE = 3'd0;

assign m_axi_A_ARUSER = 1'd0;

assign m_axi_A_ARVALID = 1'b0;

assign m_axi_A_AWADDR = 64'd0;

assign m_axi_A_AWBURST = 2'd0;

assign m_axi_A_AWCACHE = 4'd0;

assign m_axi_A_AWID = 1'd0;

assign m_axi_A_AWLEN = 32'd0;

assign m_axi_A_AWLOCK = 2'd0;

assign m_axi_A_AWPROT = 3'd0;

assign m_axi_A_AWQOS = 4'd0;

assign m_axi_A_AWREGION = 4'd0;

assign m_axi_A_AWSIZE = 3'd0;

assign m_axi_A_AWUSER = 1'd0;

assign m_axi_A_AWVALID = 1'b0;

assign m_axi_A_BREADY = 1'b0;

assign m_axi_A_WDATA = 32'd0;

assign m_axi_A_WID = 1'd0;

assign m_axi_A_WLAST = 1'b0;

assign m_axi_A_WSTRB = 4'd0;

assign m_axi_A_WUSER = 1'd0;

assign m_axi_A_WVALID = 1'b0;

assign m_axi_B_ARADDR = 64'd0;

assign m_axi_B_ARBURST = 2'd0;

assign m_axi_B_ARCACHE = 4'd0;

assign m_axi_B_ARID = 1'd0;

assign m_axi_B_ARLEN = 32'd0;

assign m_axi_B_ARLOCK = 2'd0;

assign m_axi_B_ARPROT = 3'd0;

assign m_axi_B_ARQOS = 4'd0;

assign m_axi_B_ARREGION = 4'd0;

assign m_axi_B_ARSIZE = 3'd0;

assign m_axi_B_ARUSER = 1'd0;

assign m_axi_B_ARVALID = 1'b0;

assign m_axi_B_AWADDR = 64'd0;

assign m_axi_B_AWBURST = 2'd0;

assign m_axi_B_AWCACHE = 4'd0;

assign m_axi_B_AWID = 1'd0;

assign m_axi_B_AWLEN = 32'd0;

assign m_axi_B_AWLOCK = 2'd0;

assign m_axi_B_AWPROT = 3'd0;

assign m_axi_B_AWQOS = 4'd0;

assign m_axi_B_AWREGION = 4'd0;

assign m_axi_B_AWSIZE = 3'd0;

assign m_axi_B_AWUSER = 1'd0;

assign m_axi_B_AWVALID = 1'b0;

assign m_axi_B_BREADY = 1'b0;

assign m_axi_B_WDATA = 32'd0;

assign m_axi_B_WID = 1'd0;

assign m_axi_B_WLAST = 1'b0;

assign m_axi_B_WSTRB = 4'd0;

assign m_axi_B_WUSER = 1'd0;

assign m_axi_B_WVALID = 1'b0;

assign select_ln29_1_fu_716_p3 = ((icmp_ln30_reg_841[0:0] == 1'b1) ? add_ln29_fu_710_p2 : i_fu_164);

assign select_ln29_fu_657_p3 = ((icmp_ln30_fu_651_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign shl_ln33_fu_750_p2 = select_ln29_1_reg_860 << 6'd5;

assign tmp_2_fu_780_p3 = {{trunc_ln33_reg_865}, {trunc_ln30_reg_851_pp0_iter1_reg}};

assign trunc_ln30_fu_665_p1 = select_ln29_fu_657_p3[0:0];

assign trunc_ln33_fu_723_p1 = select_ln29_1_fu_716_p3[4:0];

assign zext_ln32_fu_786_p1 = tmp_2_fu_780_p3;

assign zext_ln33_fu_760_p1 = add_ln33_fu_755_p2;

endmodule //mmult_mmult_Pipeline_LOOP1_LOOP2

-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_mmult_Pipeline_LOOPB1_LOOPB2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_B_AWVALID : OUT STD_LOGIC;
    m_axi_B_AWREADY : IN STD_LOGIC;
    m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_WVALID : OUT STD_LOGIC;
    m_axi_B_WREADY : IN STD_LOGIC;
    m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_WLAST : OUT STD_LOGIC;
    m_axi_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_ARVALID : OUT STD_LOGIC;
    m_axi_B_ARREADY : IN STD_LOGIC;
    m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_RVALID : IN STD_LOGIC;
    m_axi_B_RREADY : OUT STD_LOGIC;
    m_axi_B_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_RLAST : IN STD_LOGIC;
    m_axi_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BVALID : IN STD_LOGIC;
    m_axi_B_BREADY : OUT STD_LOGIC;
    m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Bbuf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_ce0 : OUT STD_LOGIC;
    Bbuf_we0 : OUT STD_LOGIC;
    Bbuf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_1_ce0 : OUT STD_LOGIC;
    Bbuf_1_we0 : OUT STD_LOGIC;
    Bbuf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_2_ce0 : OUT STD_LOGIC;
    Bbuf_2_we0 : OUT STD_LOGIC;
    Bbuf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_3_ce0 : OUT STD_LOGIC;
    Bbuf_3_we0 : OUT STD_LOGIC;
    Bbuf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_4_ce0 : OUT STD_LOGIC;
    Bbuf_4_we0 : OUT STD_LOGIC;
    Bbuf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_5_ce0 : OUT STD_LOGIC;
    Bbuf_5_we0 : OUT STD_LOGIC;
    Bbuf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_6_ce0 : OUT STD_LOGIC;
    Bbuf_6_we0 : OUT STD_LOGIC;
    Bbuf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_7_ce0 : OUT STD_LOGIC;
    Bbuf_7_we0 : OUT STD_LOGIC;
    Bbuf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_8_ce0 : OUT STD_LOGIC;
    Bbuf_8_we0 : OUT STD_LOGIC;
    Bbuf_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_9_ce0 : OUT STD_LOGIC;
    Bbuf_9_we0 : OUT STD_LOGIC;
    Bbuf_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_10_ce0 : OUT STD_LOGIC;
    Bbuf_10_we0 : OUT STD_LOGIC;
    Bbuf_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_11_ce0 : OUT STD_LOGIC;
    Bbuf_11_we0 : OUT STD_LOGIC;
    Bbuf_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_12_ce0 : OUT STD_LOGIC;
    Bbuf_12_we0 : OUT STD_LOGIC;
    Bbuf_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_13_ce0 : OUT STD_LOGIC;
    Bbuf_13_we0 : OUT STD_LOGIC;
    Bbuf_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_14_ce0 : OUT STD_LOGIC;
    Bbuf_14_we0 : OUT STD_LOGIC;
    Bbuf_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bbuf_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Bbuf_15_ce0 : OUT STD_LOGIC;
    Bbuf_15_we0 : OUT STD_LOGIC;
    Bbuf_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0);
    B_offset : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of mmult_mmult_Pipeline_LOOPB1_LOOPB2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln53_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln53_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal B_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal B_blk_n_AR : STD_LOGIC;
    signal icmp_ln53_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln53_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_453_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_reg_610_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_1_fu_461_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln53_1_reg_615_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal B_addr_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_reg_627 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln56_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_first_iter_1_phi_fu_391_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln56_1_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_144 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln54_fu_513_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_148 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten134_fu_152 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln53_2_fu_423_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten134_load : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln54_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_1_fu_435_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln53_fu_469_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln53_1_fu_473_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln53_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_493_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln56_fu_547_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln56_fu_552_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln56_fu_555_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_806 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mmult_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mmult_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_417_p2 = ap_const_lv1_0))) then 
                    i_fu_148 <= select_ln53_1_fu_461_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_148 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten134_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_417_p2 = ap_const_lv1_0))) then 
                    indvar_flatten134_fu_152 <= add_ln53_2_fu_423_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten134_fu_152 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_417_p2 = ap_const_lv1_0))) then 
                    j_fu_144 <= add_ln54_fu_513_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_144 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                B_addr_reg_621 <= sext_ln54_fu_503_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln53_reg_602 <= icmp_ln53_fu_417_p2;
                or_ln53_reg_606 <= or_ln53_fu_447_p2;
                select_ln53_1_reg_615 <= select_ln53_1_fu_461_p3;
                select_ln53_1_reg_615_pp0_iter1_reg <= select_ln53_1_reg_615;
                select_ln53_reg_610 <= select_ln53_fu_453_p3;
                select_ln53_reg_610_pp0_iter1_reg <= select_ln53_reg_610;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln56_reg_631 <= bitcast_ln56_fu_543_p1;
                select_ln53_1_reg_615_pp0_iter2_reg <= select_ln53_1_reg_615_pp0_iter1_reg;
                select_ln53_1_reg_615_pp0_iter3_reg <= select_ln53_1_reg_615_pp0_iter2_reg;
                select_ln53_1_reg_615_pp0_iter4_reg <= select_ln53_1_reg_615_pp0_iter3_reg;
                select_ln53_1_reg_615_pp0_iter5_reg <= select_ln53_1_reg_615_pp0_iter4_reg;
                select_ln53_1_reg_615_pp0_iter6_reg <= select_ln53_1_reg_615_pp0_iter5_reg;
                select_ln53_1_reg_615_pp0_iter7_reg <= select_ln53_1_reg_615_pp0_iter6_reg;
                select_ln53_1_reg_615_pp0_iter8_reg <= select_ln53_1_reg_615_pp0_iter7_reg;
                select_ln53_1_reg_615_pp0_iter9_reg <= select_ln53_1_reg_615_pp0_iter8_reg;
                select_ln53_reg_610_pp0_iter2_reg <= select_ln53_reg_610_pp0_iter1_reg;
                select_ln53_reg_610_pp0_iter3_reg <= select_ln53_reg_610_pp0_iter2_reg;
                select_ln53_reg_610_pp0_iter4_reg <= select_ln53_reg_610_pp0_iter3_reg;
                select_ln53_reg_610_pp0_iter5_reg <= select_ln53_reg_610_pp0_iter4_reg;
                select_ln53_reg_610_pp0_iter6_reg <= select_ln53_reg_610_pp0_iter5_reg;
                select_ln53_reg_610_pp0_iter7_reg <= select_ln53_reg_610_pp0_iter6_reg;
                select_ln53_reg_610_pp0_iter8_reg <= select_ln53_reg_610_pp0_iter7_reg;
                select_ln53_reg_610_pp0_iter9_reg <= select_ln53_reg_610_pp0_iter8_reg;
                trunc_ln2_reg_627 <= select_ln53_1_reg_615_pp0_iter8_reg(5 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    B_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_B_ARREADY, or_ln53_reg_606, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln53_reg_606 = ap_const_lv1_1))) then 
            B_blk_n_AR <= m_axi_B_ARREADY;
        else 
            B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_B_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_blk_n_R <= m_axi_B_RVALID;
        else 
            B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    Bbuf_10_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_10_ce0 <= ap_const_logic_1;
        else 
            Bbuf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_10_d0 <= bitcast_ln56_reg_631;

    Bbuf_10_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_A) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_10_we0 <= ap_const_logic_1;
        else 
            Bbuf_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_11_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_11_ce0 <= ap_const_logic_1;
        else 
            Bbuf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_11_d0 <= bitcast_ln56_reg_631;

    Bbuf_11_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_B) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_11_we0 <= ap_const_logic_1;
        else 
            Bbuf_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_12_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_12_ce0 <= ap_const_logic_1;
        else 
            Bbuf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_12_d0 <= bitcast_ln56_reg_631;

    Bbuf_12_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_C) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_12_we0 <= ap_const_logic_1;
        else 
            Bbuf_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_13_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_13_ce0 <= ap_const_logic_1;
        else 
            Bbuf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_13_d0 <= bitcast_ln56_reg_631;

    Bbuf_13_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_D) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_13_we0 <= ap_const_logic_1;
        else 
            Bbuf_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_14_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_14_ce0 <= ap_const_logic_1;
        else 
            Bbuf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_14_d0 <= bitcast_ln56_reg_631;

    Bbuf_14_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_E) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_14_we0 <= ap_const_logic_1;
        else 
            Bbuf_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_15_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_15_ce0 <= ap_const_logic_1;
        else 
            Bbuf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_15_d0 <= bitcast_ln56_reg_631;

    Bbuf_15_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_F) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_15_we0 <= ap_const_logic_1;
        else 
            Bbuf_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_1_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_1_ce0 <= ap_const_logic_1;
        else 
            Bbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_1_d0 <= bitcast_ln56_reg_631;

    Bbuf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_1_we0 <= ap_const_logic_1;
        else 
            Bbuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_2_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_2_ce0 <= ap_const_logic_1;
        else 
            Bbuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_2_d0 <= bitcast_ln56_reg_631;

    Bbuf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_2_we0 <= ap_const_logic_1;
        else 
            Bbuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_3_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_3_ce0 <= ap_const_logic_1;
        else 
            Bbuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_3_d0 <= bitcast_ln56_reg_631;

    Bbuf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_3) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_3_we0 <= ap_const_logic_1;
        else 
            Bbuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_4_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_4_ce0 <= ap_const_logic_1;
        else 
            Bbuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_4_d0 <= bitcast_ln56_reg_631;

    Bbuf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_4) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_4_we0 <= ap_const_logic_1;
        else 
            Bbuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_5_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_5_ce0 <= ap_const_logic_1;
        else 
            Bbuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_5_d0 <= bitcast_ln56_reg_631;

    Bbuf_5_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_5) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_5_we0 <= ap_const_logic_1;
        else 
            Bbuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_6_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_6_ce0 <= ap_const_logic_1;
        else 
            Bbuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_6_d0 <= bitcast_ln56_reg_631;

    Bbuf_6_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_6) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_6_we0 <= ap_const_logic_1;
        else 
            Bbuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_7_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_7_ce0 <= ap_const_logic_1;
        else 
            Bbuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_7_d0 <= bitcast_ln56_reg_631;

    Bbuf_7_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_7) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_7_we0 <= ap_const_logic_1;
        else 
            Bbuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_8_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_8_ce0 <= ap_const_logic_1;
        else 
            Bbuf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_8_d0 <= bitcast_ln56_reg_631;

    Bbuf_8_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_8) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_8_we0 <= ap_const_logic_1;
        else 
            Bbuf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_9_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_9_ce0 <= ap_const_logic_1;
        else 
            Bbuf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_9_d0 <= bitcast_ln56_reg_631;

    Bbuf_9_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_9) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_9_we0 <= ap_const_logic_1;
        else 
            Bbuf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_address0 <= zext_ln56_1_fu_561_p1(7 - 1 downto 0);

    Bbuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_ce0 <= ap_const_logic_1;
        else 
            Bbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bbuf_d0 <= bitcast_ln56_reg_631;

    Bbuf_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln2_reg_627)
    begin
        if (((trunc_ln2_reg_627 = ap_const_lv4_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bbuf_we0 <= ap_const_logic_1;
        else 
            Bbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln53_1_fu_435_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_1));
    add_ln53_2_fu_423_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten134_load) + unsigned(ap_const_lv12_1));
    add_ln53_fu_487_p2 <= std_logic_vector(unsigned(zext_ln53_fu_483_p1) + unsigned(B_offset));
    add_ln54_fu_513_p2 <= std_logic_vector(unsigned(select_ln53_fu_453_p3) + unsigned(ap_const_lv6_1));
    add_ln56_fu_555_p2 <= std_logic_vector(unsigned(shl_ln56_fu_547_p2) + unsigned(zext_ln56_fu_552_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_state2_io, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_state2_io, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_B_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (m_axi_B_RVALID = ap_const_logic_0);
    end process;


    ap_block_state2_io_assign_proc : process(m_axi_B_ARREADY, or_ln53_reg_606)
    begin
                ap_block_state2_io <= ((m_axi_B_ARREADY = ap_const_logic_0) and (or_ln53_reg_606 = ap_const_lv1_1));
    end process;


    ap_condition_806_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln53_reg_602)
    begin
                ap_condition_806 <= ((icmp_ln53_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln53_fu_417_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln53_fu_417_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_first_iter_1_phi_fu_391_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_806)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_806)) then 
                ap_phi_mux_first_iter_1_phi_fu_391_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_1_phi_fu_391_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_1_phi_fu_391_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_1_phi_fu_391_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_148)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_148;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten134_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten134_fu_152)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten134_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten134_load <= indvar_flatten134_fu_152;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_144)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_144;
        end if; 
    end process;

    bitcast_ln56_fu_543_p1 <= m_axi_B_RDATA;
    icmp_ln53_fu_417_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten134_load = ap_const_lv12_800) else "0";
    icmp_ln54_fu_441_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv6_20) else "0";
    m_axi_B_ARADDR <= B_addr_reg_621;
    m_axi_B_ARBURST <= ap_const_lv2_0;
    m_axi_B_ARCACHE <= ap_const_lv4_0;
    m_axi_B_ARID <= ap_const_lv1_0;
    m_axi_B_ARLEN <= ap_const_lv32_20;
    m_axi_B_ARLOCK <= ap_const_lv2_0;
    m_axi_B_ARPROT <= ap_const_lv3_0;
    m_axi_B_ARQOS <= ap_const_lv4_0;
    m_axi_B_ARREGION <= ap_const_lv4_0;
    m_axi_B_ARSIZE <= ap_const_lv3_0;
    m_axi_B_ARUSER <= ap_const_lv1_0;

    m_axi_B_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln53_reg_606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln53_reg_606 = ap_const_lv1_1))) then 
            m_axi_B_ARVALID <= ap_const_logic_1;
        else 
            m_axi_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B_AWADDR <= ap_const_lv64_0;
    m_axi_B_AWBURST <= ap_const_lv2_0;
    m_axi_B_AWCACHE <= ap_const_lv4_0;
    m_axi_B_AWID <= ap_const_lv1_0;
    m_axi_B_AWLEN <= ap_const_lv32_0;
    m_axi_B_AWLOCK <= ap_const_lv2_0;
    m_axi_B_AWPROT <= ap_const_lv3_0;
    m_axi_B_AWQOS <= ap_const_lv4_0;
    m_axi_B_AWREGION <= ap_const_lv4_0;
    m_axi_B_AWSIZE <= ap_const_lv3_0;
    m_axi_B_AWUSER <= ap_const_lv1_0;
    m_axi_B_AWVALID <= ap_const_logic_0;
    m_axi_B_BREADY <= ap_const_logic_0;

    m_axi_B_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_B_RREADY <= ap_const_logic_1;
        else 
            m_axi_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B_WDATA <= ap_const_lv32_0;
    m_axi_B_WID <= ap_const_lv1_0;
    m_axi_B_WLAST <= ap_const_logic_0;
    m_axi_B_WSTRB <= ap_const_lv4_0;
    m_axi_B_WUSER <= ap_const_lv1_0;
    m_axi_B_WVALID <= ap_const_logic_0;
    or_ln53_fu_447_p2 <= (icmp_ln54_fu_441_p2 or ap_phi_mux_first_iter_1_phi_fu_391_p4);
    select_ln53_1_fu_461_p3 <= 
        add_ln53_1_fu_435_p2 when (icmp_ln54_fu_441_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln53_fu_453_p3 <= 
        ap_const_lv6_0 when (icmp_ln54_fu_441_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln54_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_493_p4),64));

    shl_ln53_1_fu_473_p4 <= ((trunc_ln53_fu_469_p1 & empty) & ap_const_lv7_0);
    shl_ln56_fu_547_p2 <= std_logic_vector(shift_left(unsigned(select_ln53_1_reg_615_pp0_iter9_reg),to_integer(unsigned('0' & ap_const_lv7_5(7-1 downto 0)))));
    trunc_ln1_fu_493_p4 <= add_ln53_fu_487_p2(63 downto 2);
    trunc_ln53_fu_469_p1 <= select_ln53_1_fu_461_p3(6 - 1 downto 0);
    zext_ln53_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_1_fu_473_p4),64));
    zext_ln56_1_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_fu_555_p2),64));
    zext_ln56_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln53_reg_610_pp0_iter9_reg),7));
end behav;
